import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import logging
from aiogram import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any

from aiogram import F
from aiogram.types import Message

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from asyncio import Lock

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import json
import os
from random import sample, randint, choices
import time
from random import choice
from aiogram.types import CallbackQuery  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import random
from collections import Counter
from datetime import date

from aiogram.types import ChatMemberUpdated
from aiogram import Bot, Dispatcher, F

from aiogram.exceptions import TelegramBadRequest
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import ChatMemberUpdatedFilter

from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.formatting import as_marked_section, Bold
from aiogram import types
import asyncio



from aiogram.filters import Command

from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram import Bot
import logging

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,  # –ú–æ–∂–Ω–æ INFO –∏–ª–∏ DEBUG
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # üëâ —Å—é–¥–∞ –ø–∏—à—É—Ç—Å—è –≤—Å–µ –ª–æ–≥–∏
        # logging.StreamHandler()  # ‚ùå –æ—Ç–∫–ª—é—á–∏, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏
    ]
)

# –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –æ—Ç aiogram.event
logging.getLogger("aiogram.event").setLevel(logging.WARNING)
active_hel_games = {}  # {chat_id: {user_id: {"bet": int, "choice": None}}}
spin_result_ready = {}  # {chat_id: bool}
last_spin_bet = {}  # {user_id: {"entries": [...], "sum": int}}
hell_game_history = {}

chat_spin_start = {}  # {chat_id: timestamp}

daily_top = {}

disabled_games_by_chat = {}  # {chat_id: set(game_codes)}

chat_spin_bets = {}       # {chat_id: {user_id: {...}}}

chat_spinning = {}        # {chat_id: bool}
spin_history_by_chat = {} # {chat_id: [results]}

DAILY_TOP_PATH = "daily_top.json"
SPIN_LOG_PATH = "spin_log.json"
DISABLED_GAMES_PATH = "disabled_games.json"

RED_NUMBERS = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
BLACK_NUMBERS = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]

duel_requests = {}  # chat_id: {target_id: {...}}
active_duels = set()  # user_ids —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –¥—É—ç–ª–∏
user_last_message_time = {}
active_mines_games = {}  # user_id: timestamp
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã (–ø–æ–ª—è, –º–∏–Ω—ã, —Å–æ—Å—Ç–æ—è–Ω–∏—è)
mines = [1, 4, 7]  # –ü—Ä–∏–º–µ—Ä –∫–ª–µ—Ç–æ–∫ —Å –º–∏–Ω–∞–º–∏
opened_cells = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
players = {}  # –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤

# –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É
PAGE_SIZE = 5


daily_top_date = str(date.today())
SAKURA_RULES_CHAT_ID = -1002790729076  # –ß–∞—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª Sakura
TARGET_CHAT_ID = -1002835369234  # –¢–æ—Ç —Å–∞–º—ã–π —á–∞—Ç
CHANNEL_ID = -1002536417248  # ID –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/settskamss"
BONUS_AMOUNT = 5000

BOT_USERNAME = "economuvl_bot"  # –±–µ–∑ @
# üéØ –°–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ü–µ–Ω—ã
RARE_NICKS = {
    "durov": 15_000_000,
    "sakura": 1_500_000
}


DUEL_TIMEOUT = 120  # 2 –º–∏–Ω—É—Ç—ã
# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "7988458795:AAFsWNyn_iR8RNXuD66TAoAQuHjfVYE0SVQ"
DB_PATH = "sakurarep.db"
ADMINS = [7333809850]  # –¥–æ–±–∞–≤—å —Å–≤–æ–∏ ID —Å—é–¥–∞
ADMIN_ID = 123456789
TARGET_USER_ID = 7333809850

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class MineGame(StatesGroup):
    playing = State()

async def is_treasury_enabled(chat_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT 1 FROM group_treasury WHERE chat_id = ?", (chat_id,))
        return (await row.fetchone()) is not None



# üîß Middleware —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegisterUserMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            await register_user(event.from_user)
        return await handler(event, data)

# üîí Middleware –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
user_last_message_time = {}

class FloodControlMiddleware(BaseMiddleware):
    def __init__(self, limit_seconds: int = 3):
        super().__init__()
        self.limit = limit_seconds

    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            # ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
            if event.chat.type not in ("group", "supergroup"):
                return await handler(event, data)

            user_id = event.from_user.id
            now = time.time()

            last_time = user_last_message_time.get(user_id)

            user_last_message_time[user_id] = now

        return await handler(event, data)

class MessageStatsMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            if event.chat.type not in ("group", "supergroup"):
                return await handler(event, data)

            user = event.from_user
            chat_id = event.chat.id
            user_id = user.id
            username = user.username or f"id{user.id}"
            date = datetime.now().strftime("%Y-%m-%d")  # —Å—É—Ç–æ—á–Ω–∞—è –º–µ—Ç–∫–∞

            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("""
                    INSERT INTO message_stats (chat_id, user_id, username, date, count)
                    VALUES (?, ?, ?, ?, 1)
                    ON CONFLICT(chat_id, user_id, date)
                    DO UPDATE SET count = count + 1
                """, (chat_id, user_id, username, date))
                await db.commit()

        return await handler(event, data)

class BlacklistMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.Message, data: Dict[str, Any]):
        user_id = event.from_user.id
        async with aiosqlite.connect(DB_PATH) as db:
            row = await db.execute("SELECT 1 FROM blacklist WHERE user_id = ?", (user_id,))
            result = await row.fetchone()
            if result:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        return await handler(event, data)

dp.message.middleware(BlacklistMiddleware())

dp.message.middleware(MessageStatsMiddleware())


# üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
dp.message.middleware(RegisterUserMiddleware())
dp.message.middleware(FloodControlMiddleware(limit_seconds=3))

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
async def register_user(user: types.User):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                sakura INTEGER DEFAULT 0,
                iriski INTEGER DEFAULT 0,
                bag_open INTEGER DEFAULT 1,
                last_bonus TEXT,
                basketball_hits INTEGER DEFAULT 0,
                vip INTEGER DEFAULT 0,
                bio_checked INTEGER DEFAULT 0,
                starter_bonus INTEGER DEFAULT 0,
                registered_at TEXT
            )
        """)
        now = datetime.now().isoformat()
        await db.execute("""
            INSERT OR IGNORE INTO users (user_id, username, first_name, registered_at)
            VALUES (?, ?, ?, ?)
        """, (user.id, user.username or f"id{user.id}", user.first_name, now))
        await db.commit()
        await db.execute("""
            CREATE TABLE IF NOT EXISTS group_bonuses (
                bonus_id INTEGER PRIMARY KEY AUTOINCREMENT,
                amount INTEGER,
                max_activations INTEGER,
                activated_by TEXT DEFAULT ''
            )
        """)

        await db.execute("""
            CREATE TABLE IF NOT EXISTS market (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                seller_id INTEGER,
                amount INTEGER,
                price INTEGER,
                created_at TEXT
            )
        """)

        now = datetime.now().isoformat()
        await db.execute("""
            INSERT OR IGNORE INTO users (user_id, username, first_name, registered_at)
            VALUES (?, ?, ?, ?)
        """, (user.id, user.username or f"id{user.id}", user.first_name, now))
        await db.commit()

        async def init_db():
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS message_stats (
                        chat_id INTEGER,
                        user_id INTEGER,
                        username TEXT,
                        date TEXT,
                        count INTEGER DEFAULT 0,
                        PRIMARY KEY (chat_id, user_id, date)
                    )
                """)
                await db.commit()


async def init_db():
    async with aiosqlite.connect("sakurarep.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                sakura INTEGER DEFAULT 0,
                starter_bonus INTEGER DEFAULT 0,
                custom_name TEXT DEFAULT NULL
            )
        """)
        await db.commit()

        # üéÆ –õ–æ–≥ –∏–≥—Ä—ã "—Ö–µ–ª"
        await db.execute("""
            CREATE TABLE IF NOT EXISTS hel_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                user_id INTEGER,
                symbol TEXT,
                timestamp TEXT
            )
        """)

        # üéÅ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        await db.execute("""
            CREATE TABLE IF NOT EXISTS promocodes (
                code TEXT PRIMARY KEY,
                amount INTEGER,
                activations_left INTEGER
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS promo_usages (
                code TEXT,
                user_id INTEGER,
                PRIMARY KEY (code, user_id)
            )
        """)

        # üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ users
        result = await db.execute("PRAGMA table_info(users)")
        user_columns = await result.fetchall()
        user_column_names = [col[1] for col in user_columns]

        if "custom_name" not in user_column_names:
            await db.execute("ALTER TABLE users ADD COLUMN custom_name TEXT")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ custom_name –≤ —Ç–∞–±–ª–∏—Ü—É users")

        if "chips" not in user_column_names:
            await db.execute("ALTER TABLE users ADD COLUMN chips INTEGER DEFAULT 0")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ chips –≤ —Ç–∞–±–ª–∏—Ü—É users")

        if "created_at" not in user_column_names:
            await db.execute("ALTER TABLE users ADD COLUMN created_at TEXT")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ created_at –≤ —Ç–∞–±–ª–∏—Ü—É users")

        # üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã user_articles
        result = await db.execute("PRAGMA table_info(user_articles)")
        columns = await result.fetchall()
        column_names = [col[1] for col in columns]

        if not columns or ("chat_id" not in column_names or len(columns) == 4):
            await db.execute("DROP TABLE IF EXISTS user_articles")
            await db.execute("""
                CREATE TABLE IF NOT EXISTS user_articles (
                    user_id INTEGER,
                    chat_id INTEGER,
                    article_index INTEGER,
                    last_used TEXT,
                    PRIMARY KEY (user_id, chat_id)
                )
            """)
            print("‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ user_articles —Å PRIMARY KEY (user_id, chat_id)")

        await db.commit()




        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ custom_id –≤ —Ç–∞–±–ª–∏—Ü–µ users
        row = await db.execute("PRAGMA table_info(users)")
        columns = await row.fetchall()
        column_names = [col[1] for col in columns]

        if "custom_id" not in column_names:
            await db.execute("ALTER TABLE users ADD COLUMN custom_id INTEGER")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ custom_id –≤ —Ç–∞–±–ª–∏—Ü—É users")

        # ‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_ranks
        await db.execute("""
            CREATE TABLE IF NOT EXISTS admin_ranks (
                user_id INTEGER PRIMARY KEY,
                rank INTEGER
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS mod_rights (
                action TEXT PRIMARY KEY,
                min_rank INTEGER
            )
        """)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        defaults = {
            "–º—É—Ç": 2,
            "—Ä–∞–∑–º—É—Ç": 2,
            "–±–∞–Ω": 3,
            "—Ä–∞–∑–±–∞–Ω": 3,
            "—Å–º—Å": 2  # üëà –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
        }

        for action, rank in defaults.items():
            await db.execute("""
                INSERT OR IGNORE INTO mod_rights (action, min_rank) VALUES (?, ?)
            """, (action, rank))

        # üëë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ rank 5, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        row = await db.execute("SELECT 1 FROM admin_ranks WHERE user_id = ?", (7333809850,))
        exists = await row.fetchone()
        if not exists:
            await db.execute("INSERT INTO admin_ranks (user_id, rank) VALUES (?, ?)", (7333809850, 5))
            print("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ admin_ranks —Å —Ä–∞–Ω–≥–æ–º 5")

        await db.commit()




# üß± –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É blacklist –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –¥–æ –∑–∞–ø—É—Å–∫–∞ middleware
async def ensure_blacklist_table():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS blacklist (
                user_id INTEGER PRIMARY KEY
            )
        """)
        await db.commit()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
asyncio.get_event_loop().run_until_complete(ensure_blacklist_table())

def save_disabled_games():
    try:
        with open(DISABLED_GAMES_PATH, "w", encoding="utf-8") as f:
            json.dump(
                {str(chat_id): list(games) for chat_id, games in disabled_games_by_chat.items()},
                f,
                ensure_ascii=False,
                indent=2
            )
        print("‚úÖ –û—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∏–≥—Ä: {e}")

def load_disabled_games():
    global disabled_games_by_chat
    disabled_games_by_chat = {}

    if not os.path.exists(DISABLED_GAMES_PATH):
        print("‚ÑπÔ∏è –§–∞–π–ª –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
        return

    try:
        with open(DISABLED_GAMES_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            for chat_id, game_list in data.items():
                try:
                    chat_id_int = int(chat_id)
                    disabled_games_by_chat[chat_id_int] = set(game_list)
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {chat_id}")
        print("‚úÖ –û—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª disabled_games.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ disabled_games.json: {e}")



@dp.message(F.text.lower() == "/start")
async def start_command(message: Message):
    if message.chat.type != "private":
        return  # ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –õ–°

    user = message.from_user
    user_id = user.id
    bonus_text = ""

    # üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT starter_bonus FROM users WHERE user_id = ?", (user_id,))
        result = await row.fetchone()
        starter_bonus = result[0] if result else 0

        if not starter_bonus:
            await db.execute("""
                UPDATE users SET sakura = sakura + 5000, starter_bonus = 1
                WHERE user_id = ?
            """, (user_id,))
            await db.commit()
            bonus_text = (
                "\n\nüéÅ <b>–¢—ã –ø–æ–ª—É—á–∏–ª 5000 üå∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞!</b>\n"
                "üì¢ –ü–∏–∞—Ä-—á–∞—Ç: <b>@piarsakur</b>"
            )

    # üßæ –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=" –ë–æ–Ω—É—Å")],
            [KeyboardButton(text=" –ö–æ–º–∞–Ω–¥—ã"), KeyboardButton(text=" –î–æ–Ω–∞—Ç")]
        ],
        resize_keyboard=True
    )

    # üìú –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"–¢—ã –ø–æ–ø–∞–ª –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ <b>Sakura Bot</b> ‚Äî –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–∫—É—Ä—É üå∏, "
        f"—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è.\n"
        f"{bonus_text}\n\n"
        f"üßæ –ù–∞–ø–∏—à–∏ <code>–ø–æ–º–æ—â—å</code>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.\n"
        f"üéÆ –£–¥–∞—á–∏!"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@dp.message(F.text.lower().startswith("–º–µ—à–æ–∫"))
async def show_bag(message: Message):
    user = message.from_user

    # –¶–µ–ª—å: –ª–∏–±–æ reply-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ª–∏–±–æ —Å–∞–º
    if message.reply_to_message and not message.reply_to_message.from_user.is_bot:
        target = message.reply_to_message.from_user
    else:
        target = user

    # üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –º–µ—à–∫–∞ (–µ—Å–ª–∏ —á—É–∂–æ–π)
    if target.id != user.id:
        async with aiosqlite.connect(DB_PATH) as db:
            row = await db.execute("SELECT bag_open FROM users WHERE user_id = ?", (target.id,))
            res = await row.fetchone()
            if not res or res[0] != 1:
                return await message.reply("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –º–µ—à–∫—É.")

    # üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura, chips FROM users WHERE user_id = ?", (target.id,))
        res = await row.fetchone()
        sakura, chips = res if res else (0, 0)

    await message.reply(
        f"üí∞ –í –º–µ—à–∫–µ {target.first_name}\n"
        f"üå∏ –°–∞–∫—É—Ä: <b>{sakura}</b>\n"
        f"‚ô†Ô∏è –§–∏—à–∫–∏: <b>{chips}</b>",
        parse_mode="HTML"
    )




@dp.message(F.text.lower() == "–±")
async def show_balance(message: Message):
    user = message.from_user
    user_id = user.id
    chat_id = str(message.chat.id)

    # ‚è≥ –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if not spin_result_ready.get(chat_id, True):
        return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏.")

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (user_id,))
        res = await row.fetchone()

    sakura = res[0] if res else 0
    sakura_formatted = "{:,}".format(sakura).replace(",", " ")

    await message.reply(
        f"<b>{user.first_name}</b>\n"
        f"<b>üí∞ –ë–∞–ª–∞–Ω—Å: {sakura_formatted} ùê¨ùêöùê§ùêÆùê´</b>",
        parse_mode="HTML"
    )




@dp.message(F.text.lower() == "+–º–µ—à–æ–∫")
async def open_bag(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET bag_open = 1 WHERE user_id = ?", (user_id,))
        await db.commit()
    await message.reply("üîì –í–∞—à –º–µ—à–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç. –î—Ä—É–≥–∏–µ –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–æ —Ä–µ–ø–ª–∞—é.")



@dp.message(F.text.lower() == "-–º–µ—à–æ–∫")
async def close_bag(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET bag_open = 0 WHERE user_id = ?", (user_id,))
        await db.commit()
    await message.reply("üîí –í–∞—à –º–µ—à–æ–∫ —Ç–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã—Ç. –î—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ–≥–æ.")


@dp.message(F.text.lower().startswith("–ø "))
async def transfer_sakura(message: Message):
    sender = message.from_user
    args = message.text.strip().split()

    # üîÅ –¢–æ–ª—å–∫–æ –ø–æ reply
    if not message.reply_to_message or message.reply_to_message.from_user.is_bot:
        return await message.reply("‚ö† –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–ø–ª–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    recipient = message.reply_to_message.from_user
    recipient_id = recipient.id

    # üí∞ –°—É–º–º–∞
    try:
        amount = int(args[-1])
        if amount <= 0:
            return await message.reply("‚ùå –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    except:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å–∞–∫—É—Ä—ã —á–∏—Å–ª–æ–º.")

    if sender.id == recipient_id:
        return await message.reply("‚ùå –°–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è.")

    # üí∏ –ë–∞–ª–∞–Ω—Å –∏ –ø–µ—Ä–µ–≤–æ–¥
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (sender.id,))
        res = await row.fetchone()
        balance = res[0] if res else 0

        if balance < amount:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –µ—Å—Ç—å
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (recipient_id,))
        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (amount, sender.id))
        await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (amount, recipient_id))
        await db.commit()

    # üí¨ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    sender_mention = f"<a href='tg://user?id={sender.id}'>{sender.first_name}</a>"
    recipient_mention = f"<a href='tg://user?id={recipient.id}'>{recipient.first_name}</a>"
    amount_formatted = "{:,}".format(amount).replace(",", " ")

    await message.reply(
        f"{sender_mention} –ø–µ—Ä–µ–≤–µ–ª <b>{amount_formatted} ùê¨ùêöùê§ùêÆùê´</b> –¥–ª—è {recipient_mention}",
        parse_mode="HTML"
    )



@dp.message(F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message):
    user = message.from_user
    user_id = user.id

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("""
            SELECT sakura, username, created_at
            FROM users
            WHERE user_id = ?
        """, (user_id,))
        res = await row.fetchone()

        if not res:
            return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        sakura, username, created_at = res
        sakura_formatted = "{:,}".format(sakura).replace(",", " ")
        display_name = username or user.first_name

        # üëë katana
        if user_id == 7333809850:
            profile_text = (
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>katana</b>\n"
                "üë®üèª‚Äçüîß <i>bot developer</i>\n\n"
                f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å: <b>{sakura_formatted} —Å–∞–∫—É—Äüå∏</b>\n"
                f"‚ñ´Ô∏è ID: <code>888</code>"
            )
        else:
            # üìÖ –†–∞—Å—á—ë—Ç –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if created_at:
                try:
                    reg_date = datetime.fromisoformat(created_at)
                    days = (datetime.utcnow() - reg_date).days
                    reg_text = f"{days} –¥–Ω–µ–π"
                except:
                    reg_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                reg_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            profile_text = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{display_name}</b>\n"
                f"üë®üèª‚Äçüîß –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ: <b>{reg_text}</b>\n\n"
                f"üíö –ë–∞–ª–∞–Ω—Å: <b>{sakura_formatted} —Å–∞–∫—É—Äüå∏</b>\n"
                f"üíö ID: <code>{user_id}</code>"
            )

        await message.reply(profile_text, parse_mode="HTML")






@dp.message(F.text.lower().startswith("–∫—É–ø–∏—Ç—å "))
async def buy_chips(message: Message):
    user = message.from_user
    args = message.text.strip().split()

    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–∫—É–ø–∏—Ç—å 3</code>", parse_mode="HTML")

    try:
        count = int(args[1])
        if count <= 0:
            return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ —á–∏—Å–ª–æ–º.")

    price_per_chip = 5000
    total_price = count * price_per_chip

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (user.id,))
        result = await row.fetchone()
        balance = result[0] if result else 0

        if balance < total_price:
            return await message.reply(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä—ã.\n–ù—É–∂–Ω–æ: {total_price} üå∏\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} üå∏"
            )

        await db.execute("""
            UPDATE users SET sakura = sakura - ?, chips = chips + ?
            WHERE user_id = ?
        """, (total_price, count, user.id))
        await db.commit()

    await message.reply(
        f"‚úÖ –¢—ã –∫—É–ø–∏–ª <b>{count} —Ñ–∏—à–µ–∫</b> [‚ô†Ô∏è Poker Chip] –∑–∞ <b>{total_price} üå∏</b>",
        parse_mode="HTML"
    )






@dp.message(F.text.lower().startswith(".–∏–¥"))
async def id_command(message: Message):
    args = message.text.strip().split()
    target_user = None

    # üë§ –ü–æ —Ä–µ–ø–ª–∞—é
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user

    # üîé –ü–æ username
    elif len(args) == 2 and args[1].startswith("@"):
        username = args[1][1:].lower()
        async with aiosqlite.connect(DB_PATH) as db:
            row = await db.execute("SELECT user_id FROM users WHERE lower(username) = ?", (username,))
            result = await row.fetchone()
        if not result:
            return await message.reply(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                f"–û–Ω –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É.",
                parse_mode="HTML"
            )
        user_id = result[0]
        target_user = types.User(id=user_id, is_bot=False, first_name=username)

    # üë§ –ê–≤—Ç–æ—Ä
    else:
        target_user = message.from_user

    user_id = target_user.id

    # üëë –û—Å–æ–±—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî katana
    if user_id == 7333809850:
        return await message.reply("üë®üèª‚Äçüîß bot developer")  # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    # üîç –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    name = target_user.first_name
    await message.reply(f"üÜî <b>{name}</b>\n<code>{user_id}</code>", parse_mode="HTML")






#–∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
@dp.message(F.text.lower().startswith(("/–≤—ã–¥–∞—Ç—å", "/–∑–∞–±—Ä–∞—Ç—å")))
async def admin_grant_or_take(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    args = message.text.strip().split()
    if len(args) != 3:
        return await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–≤—ã–¥–∞—Ç—å ID —Å—É–º–º–∞ –∏–ª–∏ /–∑–∞–±—Ä–∞—Ç—å ID —Å—É–º–º–∞")

    cmd, user_input, amount_str = args

    # üî¢ –°—É–º–º–∞
    try:
        amount = int(amount_str)
        if amount <= 0:
            return await message.reply("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")

    # üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ user_id
    async with aiosqlite.connect(DB_PATH) as db:
        if user_input.startswith("@"):
            row = await db.execute("SELECT user_id FROM users WHERE username = ?", (user_input[1:],))
        else:
            try:
                uid = int(user_input)
                row = await db.execute("SELECT user_id FROM users WHERE user_id = ?", (uid,))
            except:
                return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")

        res = await row.fetchone()
        if not res:
            return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        user_id = res[0]

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if cmd == "/–≤—ã–¥–∞—Ç—å":
            await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (amount, user_id))
            await db.commit()
            return await message.reply(
                f"‚úÖ –í—ã–¥–∞–Ω–æ <b>{amount} üå∏</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.",
                parse_mode="HTML"
            )

        elif cmd == "/–∑–∞–±—Ä–∞—Ç—å":
            await db.execute("UPDATE users SET sakura = MAX(sakura - ?, 0) WHERE user_id = ?", (amount, user_id))
            await db.commit()
            return await message.reply(
                f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ <b>{amount} üå∏</b> —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>.",
                parse_mode="HTML"
            )

        else:
            return await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")




#–≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω—Å–∫–∏–π –±–ª–æ–∫

def parse_time_arg(time_str: str) -> int:
    time_str = time_str.lower()
    if time_str.endswith("–º"):
        return int(time_str[:-1]) * 60
    elif time_str.endswith("—á"):
        return int(time_str[:-1]) * 60 * 60
    elif time_str.endswith("–¥"):
        return int(time_str[:-1]) * 60 * 60 * 24
    return int(time_str) * 60  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º–∏–Ω—É—Ç—ã









@dp.message(F.text.lower().startswith("–±–∞–Ω"))
async def admin_ban(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–±–∞–Ω ID</code>", parse_mode="HTML")

    try:
        target_id = int(args[1])
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO blacklist (user_id) VALUES (?)", (target_id,))
        await db.commit()

    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ.", parse_mode="HTML")




@dp.message(F.text.lower().startswith("—Ä–∞–∑–±–∞–Ω"))
async def admin_unban(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>—Ä–∞–∑–±–∞–Ω ID</code>", parse_mode="HTML")

    try:
        target_id = int(args[1])
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM blacklist WHERE user_id = ?", (target_id,))
        await db.commit()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ.", parse_mode="HTML")




#–∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã






# ========== –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ==========
def load_spin_log():
    global spin_history_by_chat
    if os.path.exists(SPIN_LOG_PATH):
        try:
            with open(SPIN_LOG_PATH, "r", encoding="utf-8") as f:
                spin_history_by_chat = json.load(f)
        except:
            spin_history_by_chat = {}
    else:
        spin_history_by_chat = {}

def load_daily_top():
    global daily_top, daily_top_date
    if os.path.exists(DAILY_TOP_PATH):
        try:
            with open(DAILY_TOP_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
                daily_top = data.get("top", {})
                daily_top_date = data.get("date", str(date.today()))
        except:
            daily_top = {}
            daily_top_date = str(date.today())
    else:
        daily_top = {}
        daily_top_date = str(date.today())

def save_spin_result(chat_id: int, result: int):
    chat_id = str(chat_id)
    spin_history_by_chat.setdefault(chat_id, []).insert(0, result)
    spin_history_by_chat[chat_id] = spin_history_by_chat[chat_id][:20]
    with open(SPIN_LOG_PATH, "w", encoding="utf-8") as f:
        json.dump(spin_history_by_chat, f)

def save_daily_top():
    with open(DAILY_TOP_PATH, "w", encoding="utf-8") as f:
        json.dump({"date": daily_top_date, "top": daily_top}, f)

load_spin_log()
load_daily_top()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==========
def get_weighted_result_complex(chat_id: int, bets: dict) -> int:
    weights = {i: 1.0 for i in range(37)}
    all_numbers = []
    for b in bets.values():
        all_numbers += b.get("numbers", [])
    freq = Counter(all_numbers)
    for num, count in freq.items():
        weights[num] *= 0.85 ** count

    # üìâ –°–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∏—Å–ª–∞
    history = spin_history_by_chat.get(str(chat_id), [])
    recent = history[:2]
    for n in recent:
        weights[n] *= 0.6

    # ‚ôªÔ∏è –¶–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    last_colors = []
    for n in history[:5]:
        if n == 0:
            last_colors.append("green")
        elif n in RED_NUMBERS:
            last_colors.append("red")
        else:
            last_colors.append("black")

    if len(set(last_colors[:3])) == 1:
        dominant = last_colors[0]
        if dominant == "red":
            for n in RED_NUMBERS:
                weights[n] *= 0.7
        elif dominant == "black":
            for n in BLACK_NUMBERS:
                weights[n] *= 0.7

    # üìõ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ —á–∏—Å–ª–æ –∑–∞ 10 –∏–≥—Ä
    top_common = Counter(history[:10]).most_common(1)
    if top_common:
        frequent = top_common[0][0]
        weights[frequent] *= 0.5

    numbers, w = zip(*weights.items())
    return choices(numbers, weights=w, k=1)[0]

def get_number_multiplier(count: int) -> float:
    return round((36 / count) * 0.9, 2) if 0 < count <= 16 else 0.0

def update_daily_top(chat_id: int, user_id: int, name: str, amount: int):
    global daily_top, daily_top_date
    today = str(date.today())
    if daily_top_date != today:
        daily_top = {}
        daily_top_date = today
    cid = str(chat_id)
    uid = str(user_id)
    daily_top.setdefault(cid, {}).setdefault(uid, {"name": name, "win": 0})
    daily_top[cid][uid]["win"] += amount
    save_daily_top()


@dp.message(F.text.regexp(r"^\d+ "))
async def handle_text_spin(message: Message):
    if "roulette" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("üé∞ –ò–≥—Ä–∞ '–†—É–ª–µ—Ç–∫–∞' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    if message.chat.type == "private":
        return await message.reply("‚ö† –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    user = message.from_user
    uid = user.id
    cid = message.chat.id
    parts = message.text.lower().split()

    try:
        amount = int(parts[0])
        if amount <= 0:
            return
    except:
        return

    red = black = 0
    numbers = []

    for part in parts[1:]:
        if part == "–∫":
            red = amount
        elif part == "—á":
            black = amount
        elif part == "—Ä–∞–Ω–¥–æ–º":
            numbers = sample(range(1, 37), min(16, 36))
        elif part.isdigit():
            n = int(part)
            if 0 <= n <= 36:
                numbers.append(n)

    total = red + black + len(numbers) * amount

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (uid,))
        res = await row.fetchone()
        balance = res[0] if res else 0
        if balance < total:
            return await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total} üå∏")
        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (total, uid))
        await db.commit()

    chat_spin_bets.setdefault(cid, {})
    user_bets = chat_spin_bets[cid].setdefault(uid, {"entries": [], "sum": 0})
    user_bets["sum"] += total

    if red:
        user_bets["entries"].append({"type": "red", "amount": red})
    if black:
        user_bets["entries"].append({"type": "black", "amount": black})
    for n in numbers:
        user_bets["entries"].append({"type": "number", "number": n, "amount": amount})

    if cid not in chat_spin_start:
        chat_spin_start[cid] = time.time()

    mention = f"<a href='tg://user?id={uid}'>{user.first_name}</a>"
    lines = []

    if red:
        lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {red} üå∏ –Ω–∞ üî¥")
    if black:
        lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {black} üå∏ –Ω–∞ ‚ö´")
    for n in numbers:
        lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {amount} üå∏ –Ω–∞ {n}")

    if lines:
        await message.reply("\n".join(lines), parse_mode="HTML")
    else:
        await message.reply("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü—Ä–∏–º–µ—Ä: <code>100 –∫ —á 7</code>", parse_mode="HTML")





ROULETTE_STICKER_MAP = {
    0: "CAACAgIAAxkBAhxuEmh4HrohKPsWkWTa0Gc05T7obThoAAIxcQACwY-oS-C0sJmfrQEJNgQ",
    1: "CAACAgIAAxkBAhxuemh4ILxF7rfWvW6UhKWMxthYGrjYAAJibQACxX-pS_BXYj47_3YzNgQ",
    2: "CAACAgIAAxkBAhxt9mh4HhXZqE0YpUcoI860H0yN-TK5AAK7cAACa3ypS4wePbZsMruENgQ",
    3: "CAACAgIAAxkBAhxuIGh4HuvnDjcQumzMe-NksUsTQXxWAAJ_awAChs2pS_k2EHscsHMtNgQ",
    4: "CAACAgIAAxkBAhxuTGh4H8IkV9TrklcbH078ajwEXiF2AAIZbAACCZaoS8Npzo5cAAFidjYE",
    5: "CAACAgIAAxkBAhxtJWh4GQHtwkSSGonKkpMKZAZXzkjVAAJobwAC9nSpSzXRYISSrFfcNgQ",
    6: "CAACAgIAAxkBAhxuWGh4IAYceTEi6x_LF3haVjJYJ4EJAAIicAACSSCpS6betiFUYw5jNgQ",
    7: "CAACAgIAAxkBAhxudWh4IKnw5R16PbU1YNaZ1InZdViYAAKmZQACDFCwS846uoxbMOz3NgQ",
    8: "CAACAgIAAxkBAhxtPGh4GZGwtVC-gZa2UDzD-f2ZYj3eAAJzaQACjTKpSyt4s_ED4n5pNgQ",
    9: "CAACAgIAAxkBAhxuXWh4IBsOUr4mrFZwc8G6qDZxzOKVAAKDZgACtT6pS8GwDlCmkxgENgQ",
    10: "CAACAgIAAxkBAhxuFWh4Hsm6Xr_YWdKrFsQQKMUbPge0AAIIbAACf0qoS2X1__wZ-cAsNgQ",
    11: "CAACAgIAAxkBAhxuAWh4HmmEYUvH5TBvMgd-R56MRyYGAALeawACOX6pS2AJamyKKTikNgQ",
    12: "CAACAgIAAxkBAhxuJmh4HwX3qdlbA18_LmdiEfQlVDi5AAJzdwACpmSoSxkFgdm1vgewNgQ",
    13: "CAACAgIAAxkBAhxuc2h4IJktToOly_1VwpMR-BSg85_qAAL1ZQACpS2wS7gD91hUGXcTNgQ",
    14: "CAACAgIAAxkBAhxuY2h4IFgpAAG4D9PqgzWDdRanJr0rUwACaHUAAm06qUubaUhHHkRQtDYE",
    15: "CAACAgIAAxkBAhxuR2h4H7MT1PcNvnt2_GUTdfhJIqruAAJecgACuDmpS56q2j8hpkidNgQ",
    16: "CAACAgIAAxkBAhxuCGh4HoxlaiP3oCYsw7uQPbu4IBJ1AALedAACXYuoS2LbTcv4YdnxNgQ",
    17: "CAACAgIAAxkBAhxuKmh4Hx-OAyljFT_P9ekUHxKiloKsAAL5cQADyqhLPL6kTTa3_sM2BA",
    18: "CAACAgIAAxkBAhxuHGh4HtqYkcEEli1HtvcG7h8vvWYwAAK7cQAClqipS3j426tQd1ALNgQ",
    19: "CAACAgIAAxkBAhxt-mh4HiTwPoTMB-hwZZhwaGqII3HfAALTbwACFG-oSziEB1gSrr6wNgQ",
    20: "CAACAgIAAxkBAhxtL2h4GTVdyiFi96ZT4HIfUe7eXrOXAAKaYwACf62pS4iiUDSFR0a7NgQ",
    22: "CAACAgIAAxkBAhxuYWh4ID02s1cb42smo37TgEMZNYonAAKidQACW3ioS57bJaI8iXxFNgQ",
    23: "CAACAgIAAxkBAhxuEGh4HqptqrdCIz2NjsLzIJCMo2yBAALFcQACeY2oSxlUW8fv_LmXNgQ",
    24: "CAACAgIAAxkBAhxt5mh4HdUnNpIAAYyZ_Q48twyH6BCxDQAC4nkAArFxsEu3KApsLo6nfDYE",
    25: "CAACAgIAAxkBAhxtKmh4GR7tRWbPqCLQsnPbxxeKeDdNAAJ_cwACSKqpS3Z1Rtbz5CD0NgQ",
    26: "CAACAgIAAxkBAhxubWh4IH6eSivyjtVyjRfke_vumczyAAI-awAC__mxS4aGkpB9THDANgQ",
    27: "CAACAgIAAxkBAhxt_mh4HlGXIWgF09rDMlJbAuYq18bEAAI9bQACmPWoS_AIYwu8GfFtNgQ",
    28: "CAACAgIAAxkBAhxtLWh4GSqZ1NJlo5psyPuS8GYvDt2EAAK7bAACJSSoSxMweWRCg47LNgQ",
    29: "CAACAgIAAxkBAhxuN2h4H1OJWoYPlvgQMCfZysSgpvsbAALfbgACHtWpS17RRzdqh8rDNgQ",
    30: "CAACAgIAAxkBAhxuLmh4HytSzo6O0Yt39TK8IB0ze8JNAALcbQACOgawS6a-krzx53S7NgQ",
    31: "CAACAgIAAxkBAhxuBmh4HnolwyAOiYXuvG7idqIZsN_fAAIWbwACZGapS8XIF1b-veMENgQ",
    32: "CAACAgIAAxkBAhxt7Gh4HfM-hr2dEzroIQdATAIbOJCsAAJjcQACUEKxS6dWwVP1E7HPNgQ",
    33: "CAACAgIAAxkBAhxt8mh4HgTh5ovPDcNm5khE-tTzISpNAAJRcgACKJuxS7u3yZqd0ZC5NgQ",
    34: "CAACAgIAAxkBAhxuT2h4H8zeVtuFB5KHqBHIAmrexV6TAAJpdwACrqOxSwZCP_cVJSUTNgQ",
    35: "CAACAgIAAxkBAhxt_Gh4HkLLEsNpnBG48Iy745cSSxbEAAK9aAACzZeoSwtiUBA0gaUNNgQ",
    36: "CAACAgIAAxkBAhxuUWh4H9qaTSqbnVGejgkgVULhzaQeAAJRbwACL0moS4HHKaEP45LdNgQ",
}

@dp.message(F.text.lower().in_(["–≥–æ", "/–≥–æ"]))
async def spin_game(message: Message):
    if "roulette" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("üé∞ –ò–≥—Ä–∞ '–†—É–ª–µ—Ç–∫–∞' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")


    cid = message.chat.id
    author_uid = message.from_user.id
    now = time.time()

    if message.chat.type == "private":
        return await message.reply("‚ö† –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    if chat_spinning.get(cid):
        return await message.reply("‚è≥ –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.")
    if cid not in chat_spin_bets or not chat_spin_bets[cid]:
        return await message.reply("‚ùå –ï—â—ë –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.")
    if author_uid not in chat_spin_bets[cid]:
        return await message.reply("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.")

    start_ts = chat_spin_start.get(cid)
    if start_ts is None:
        return await message.reply("‚ö† –°—Ç–∞–≤–∫–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å.")
    if now - start_ts < 12:
        return await message.reply(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {int(12 - (now - start_ts))} —Å–µ–∫.")

    chat_spinning[cid] = True
    spin_result_ready[cid] = False

    # üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = get_weighted_result_complex(cid, chat_spin_bets[cid])
    emoji = "üü¢" if result == 0 else "üî¥" if result in RED_NUMBERS else "‚ö´"
    save_spin_result(cid, result)
    spin_result_ready[cid] = True

    # üé∞ –ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Å—Ç–∏–∫–µ—Ä –ø–æ —á–∏—Å–ª—É)
    sticker_id = ROULETTE_STICKER_MAP.get(result)
    if sticker_id:
        sticker_msg = await message.reply_sticker(sticker_id)
        await asyncio.sleep(3)
        try:
            await sticker_msg.delete()
        except:
            pass

    winners = []
    stakes = []

    async with aiosqlite.connect(DB_PATH) as db:
        for uid, bet in chat_spin_bets[cid].items():
            entries = bet.get("entries", [])
            spent = bet.get("sum", 0)
            win = 0

            row = await db.execute("SELECT first_name FROM users WHERE user_id = ?", (uid,))
            u = await row.fetchone()
            name = u[0] if u else "–ò–≥—Ä–æ–∫"
            mention = f"<a href='tg://user?id={uid}'>{name}</a>"

            last_spin_bet[uid] = {"entries": entries, "sum": spent}

            for entry in entries:
                amount = entry["amount"]
                if entry["type"] == "red":
                    stakes.append(f"–°–∞–∫—É—Ä–∞ {amount} üå∏ –Ω–∞ üî¥")
                    if result in RED_NUMBERS:
                        win += amount * 2
                elif entry["type"] == "black":
                    stakes.append(f"–°–∞–∫—É—Ä–∞ {amount} üå∏ –Ω–∞ ‚ö´")
                    if result in BLACK_NUMBERS:
                        win += amount * 2
                elif entry["type"] == "number":
                    number = entry["number"]
                    stakes.append(f"–°–∞–∫—É—Ä–∞ {amount} üå∏ –Ω–∞ {number}")
                    if number == result:
                        win += amount * 36

            if win > 0:
                await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (win, uid))
                update_daily_top(cid, uid, name, win)
                winners.append(f"{mention} –≤—ã–∏–≥—Ä–∞–ª –Ω–∞ {result} ‚Äî <b>{win}</b> üå∏")

        await db.commit()

    msg = [f"üí† –†—É–ª–µ—Ç–∫–∞: <b>{result} {emoji}</b>"] + stakes + [""] + (winners or ["‚ùå –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª."])
    text = "\n".join(msg)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=" –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_{author_uid}"),
        InlineKeyboardButton(text=" –£–¥–≤–æ–∏—Ç—å", callback_data=f"double_{author_uid}")
    ]])

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    chat_spinning[cid] = False
    spin_result_ready.pop(cid, None)
    chat_spin_bets.pop(cid, None)
    chat_spin_start.pop(cid, None)




@dp.callback_query(F.data.startswith("double_"))
async def double_bet(call: CallbackQuery):
    if "roulette" in disabled_games_by_chat.get(call.message.chat.id, set()):
        return await call.answer("üé∞ –ò–≥—Ä–∞ '–†—É–ª–µ—Ç–∫–∞' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", show_alert=True)

    uid = call.from_user.id
    if str(uid) != call.data.split("_")[1]:
        return await call.answer("‚õî –ù–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞", show_alert=True)

    last_bet = last_spin_bet.get(uid)
    if not last_bet:
        return await call.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.")

    cid = call.message.chat.id
    chat_spin_start[cid] = time.time()

    base_entries = []
    doubled_sum = 0
    for entry in last_bet["entries"]:
        new_entry = entry.copy()
        new_entry["amount"] *= 2
        base_entries.append(new_entry)
        doubled_sum += new_entry["amount"]

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (uid,))
        res = await row.fetchone()
        balance = res[0] if res else 0

        if balance == 0:
            return await call.message.answer(
                f"‚õî <b><a href='tg://user?id={uid}'>{call.from_user.first_name}</a></b>, —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.",
                parse_mode="HTML"
            )

        if balance < doubled_sum:
            # ‚úÇÔ∏è –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É
            factor = balance / doubled_sum
            adjusted_entries = []
            adjusted_sum = 0
            for entry in base_entries:
                adjusted_amount = max(int(entry["amount"] * factor), 1)
                adjusted = entry.copy()
                adjusted["amount"] = adjusted_amount
                adjusted_entries.append(adjusted)
                adjusted_sum += adjusted_amount
        else:
            adjusted_entries = base_entries
            adjusted_sum = doubled_sum

        # üí∏ –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (adjusted_sum, uid))
        await db.commit()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    if cid not in chat_spin_bets:
        chat_spin_bets[cid] = {}

    chat_spin_bets[cid][uid] = {
        "entries": adjusted_entries,
        "sum": adjusted_sum
    }

    user_name = call.from_user.first_name
    mention = f"<b><a href='tg://user?id={uid}'>{user_name}</a></b>"

    lines = []
    for entry in adjusted_entries:
        if entry["type"] == "red":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ üî¥")
        elif entry["type"] == "black":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ ‚ö´")
        elif entry["type"] == "number":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ {entry['number']}")

    await call.message.answer("\n".join(lines), parse_mode="HTML")
    await call.answer()


@dp.callback_query(F.data.startswith("repeat_"))
async def repeat_bet(call: CallbackQuery):
    if "roulette" in disabled_games_by_chat.get(call.message.chat.id, set()):
        return await call.answer("üé∞ –ò–≥—Ä–∞ '–†—É–ª–µ—Ç–∫–∞' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", show_alert=True)

    uid = call.from_user.id
    if str(uid) != call.data.split("_")[1]:
        return await call.answer("‚õî –ù–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞", show_alert=True)

    last_bet = last_spin_bet.get(uid)
    if not last_bet:
        return await call.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.")

    cid = call.message.chat.id
    chat_spin_start[cid] = time.time()

    entries = last_bet["entries"]
    total_sum = last_bet["sum"]

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (uid,))
        res = await row.fetchone()
        balance = res[0] if res else 0

        if balance < total_sum:
            return await call.message.answer(
                f"‚õî <b><a href='tg://user?id={uid}'>{call.from_user.first_name}</a></b>, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏.\n"
                f"–ù—É–∂–Ω–æ: {total_sum} üå∏, —É —Ç–µ–±—è: {balance} üå∏",
                parse_mode="HTML"
            )

        # üí∏ –°–ø–∏—Å—ã–≤–∞–µ–º
        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (total_sum, uid))
        await db.commit()

    # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    if cid not in chat_spin_bets:
        chat_spin_bets[cid] = {}

    chat_spin_bets[cid][uid] = {
        "entries": entries,
        "sum": total_sum
    }

    user_name = call.from_user.first_name
    mention = f"<b><a href='tg://user?id={uid}'>{user_name}</a></b>"

    lines = []
    for entry in entries:
        if entry["type"] == "red":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ üî¥")
        elif entry["type"] == "black":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ ‚ö´")
        elif entry["type"] == "number":
            lines.append(f"{mention} –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: –°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ {entry['number']}")

    await call.message.answer("\n".join(lines), parse_mode="HTML")
    await call.answer()







@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_spin(message: Message):
    cid = message.chat.id
    uid = message.from_user.id

    # üö´ –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è ‚Äî –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å
    if chat_spinning.get(cid):
        return await message.reply("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç. –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–µ–ª—å–∑—è.")

    if cid in chat_spin_bets and uid in chat_spin_bets[cid]:
        bet = chat_spin_bets[cid].pop(uid)
        refund = bet.get("sum", 0)

        if refund > 0:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (refund, uid))
                await db.commit()

        # üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        user_name = message.from_user.first_name
        mention = f"<b><a href='tg://user?id={uid}'>{user_name}</a></b>"

        return await message.reply(
            f"{mention}\nüö´ –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç: <b>{refund}</b> üå∏",
            parse_mode="HTML"
        )

    await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏.")



@dp.message(F.text.lower() == "—Å—Ç–∞–≤–∫–∞")
async def show_my_bet(message: Message):
    cid = message.chat.id
    uid = message.from_user.id

    bet = chat_spin_bets.get(cid, {}).get(uid)
    if not bet or not bet.get("entries"):
        return await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏.")

    entries = bet["entries"]
    user_name = message.from_user.first_name
    mention = f"<b><a href='tg://user?id={uid}'>{user_name}</a></b>"

    lines = [f"{mention}"]
    for entry in entries:
        if entry["type"] == "red":
            lines.append(f"–°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ üî¥")
        elif entry["type"] == "black":
            lines.append(f"–°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ ‚ö´")
        elif entry["type"] == "number":
            lines.append(f"–°–∞–∫—É—Ä–∞ {entry['amount']} üå∏ –Ω–∞ {entry['number']}")

    await message.reply("\n".join(lines), parse_mode="HTML")


@dp.message(F.text.lower().in_(["–ª–æ–≥", "/–ª–æ–≥"]))
async def spin_log_command(message: Message):
    if "log" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –æ—Ç–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    cid = str(message.chat.id)

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—Ä—É—Ç–∏—Ç—Å—è –ª–∏ –µ—â—ë
    if not spin_result_ready.get(cid, True):
        return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä—É–ª–µ—Ç–∫–∏, –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –ª–æ–≥.")

    hist = spin_history_by_chat.get(cid, [])
    if not hist:
        return await message.reply("‚õî –õ–æ–≥ –ø—É—Å—Ç. –ï—â—ë –Ω–µ –±—ã–ª–æ –∏–≥—Ä.")

    def fmt(n):
        color = "üü¢" if n == 0 else "üî¥" if n in RED_NUMBERS else "‚ö´"
        return f"<b>{n}</b> {color}"

    log_text = "\n".join(fmt(n) for n in hist[:10])  # üëà –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    await message.reply(log_text, parse_mode="HTML")





@dp.message(F.text.lower().in_(["/—Ç–æ–ø", "—Ç–æ–ø"]))
async def show_daily_top(message: Message):
    cid = str(message.chat.id)
    if cid not in daily_top or not daily_top[cid]:
        return await message.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")

    top = sorted(daily_top[cid].items(), key=lambda x: x[1]['win'], reverse=True)[:10]
    lines = ["üìä <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"]
    for i, (uid, data) in enumerate(top, 1):
        lines.append(f"{i}. {data['name']} ‚Äî <b>{data['win']} üå∏</b>")

    await message.reply("\n".join(lines), parse_mode="HTML")


@dp.message(F.text.lower() == "/–æ–±–Ω—É–ª_—Ç–æ–ø")
async def reset_top_command(message: Message):
    if message.chat.type != "private":
        return  # –¢–æ–ª—å–∫–æ –≤ –õ–°

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    daily_top.clear()
    await message.reply("‚úÖ –í—Å–µ —Ç–æ–ø—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã.")




#–º–æ–Ω–µ—Ç–∫–∞
@dp.message(F.text.lower().startswith("–º–æ–Ω–µ—Ç–∞"))
async def coin_command(message: Message):
    user = message.from_user
    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: <code>–º–æ–Ω–µ—Ç–∞ 100</code>", parse_mode="HTML")
    try:
        bet = int(args[1])
        if bet <= 0 or bet > 1_000_000:
            return await message.reply("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1 000 000 üå∏.")
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (user.id,))
        balance = (await row.fetchone() or [0])[0]

        if balance < bet:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (bet, user.id))
        await db.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ callback data
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü¶Ö –û—Ä—ë–ª", callback_data=f"coin:orel:{bet}"),
            InlineKeyboardButton(text="üé≤ –†–µ—à–∫–∞", callback_data=f"coin:reshka:{bet}")
        ]
    ])

    await message.reply("ü™ô –í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:", reply_markup=buttons)

@dp.callback_query(F.data.startswith("coin:"))
async def handle_coin(callback: CallbackQuery):
    parts = callback.data.split(":")
    side = parts[1]  # orel / reshka
    bet = int(parts[2])
    user = callback.from_user
    user_id = user.id

    await callback.message.edit_text("ü™ô –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç—É...")
    gif = await callback.message.answer_animation(
        "https://i.gifer.com/3X95.gif",
        caption="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    await asyncio.sleep(2.5)
    try:
        await gif.delete()
    except:
        pass

    result = choice(["orel", "reshka"])
    win = bet * 2 if result == side else 0
    emoji = "ü¶Ö" if result == "orel" else "üé≤"
    result_text = f"{emoji} <b>{result.upper()}</b>!"

    if win:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (win, user_id))
            await db.commit()
        final = f"{result_text}\n\nüéâ –ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{win}</b> üå∏"
    else:
        final = f"{result_text}\n\nüò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –°—Ç–∞–≤–∫–∞ <b>{bet}</b> üå∏ —Å–≥–æ—Ä–µ–ª–∞."

    await callback.message.answer(final, parse_mode="HTML")


def render_mines_buttons(opened: set, mines: set, reveal=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–∏–Ω –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫.
    :param opened: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫.
    :param mines: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–∏–Ω.
    :param reveal: –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    buttons = []
    for i in range(25):
        if i in opened:
            # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–ª–∏ –º–∏–Ω—É
            emoji = "üí†" if i not in mines else "üí£"
        else:
            # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ? (–∏–ª–∏ —Å–∞–º–∏ –º–∏–Ω—É—Å—ã –ø—Ä–∏ reveal)
            emoji = "‚ùì" if not reveal else ("üí£" if i in mines else "üí†")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        buttons.append(InlineKeyboardButton(text=emoji, callback_data=f"mine:{i}"))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    rows = [buttons[i:i + 5] for i in range(0, 25, 5)]
    rows.append([InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data="mine:take")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


mines_locks: dict[int, Lock] = {}

# üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ
@dp.message(F.text.lower().startswith("–º–∏–Ω—ã"))
async def start_mines(message: Message, state: FSMContext):
    if "mines" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("üí£ –ò–≥—Ä–∞ '–ú–∏–Ω—ã' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    if message.chat.type not in ("group", "supergroup"):
        return await message.reply("‚ö† –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    user_id = message.from_user.id
    if user_id in active_mines_games:
        return await message.reply("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞. –ó–∞–≤–µ—Ä—à–∏ –µ—ë –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π.")

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–º–∏–Ω—ã 500</code>", parse_mode="HTML")

    try:
        bet = int(args[1])
        if bet <= 0 or bet > 500000000000000000000000000:
            return await message.reply("‚ö† –£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É –æ—Ç 1 –¥–æ 500000000000000000000000000.")
    except ValueError:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (user_id,))
        balance = (await row.fetchone() or [0])[0]
        if balance < bet:
            return await message.reply("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä—ã.")
        await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (bet, user_id))
        await db.commit()

    total_cells = 25
    total_mines = 6
    mines = set(random.sample(range(total_cells), total_mines))
    opened = set()

    active_mines_games[user_id] = time.time()
    mines_locks[user_id] = Lock()

    await state.set_state(MineGame.playing)
    await state.update_data(mines=mines, opened=opened, bet=bet)

    mention = f"<a href='tg://user?id={user_id}'>{message.from_user.first_name}</a>"
    msg = await message.reply(
        f"üë§ {mention}\nüí£ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã–±–∏—Ä–∞–π —è—á–µ–π–∫–∏:",
        reply_markup=render_mines_buttons(opened, mines, reveal=False, show_take_button=False, show_cancel_button=True),
        parse_mode="HTML"
    )

    asyncio.create_task(end_mine_game_timeout(msg, state, user_id, bet))


async def end_mine_game_timeout(msg: Message, state: FSMContext, user_id: int, bet: int):
    await asyncio.sleep(120)
    if user_id not in active_mines_games:
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (bet, user_id))
        await db.commit()

    try:
        await msg.edit_text(f"‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –°—Ç–∞–≤–∫–∞ <b>{bet} üå∏</b> –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    await state.clear()
    active_mines_games.pop(user_id, None)
    mines_locks.pop(user_id, None)


def render_mines_buttons(opened: set, mines: set, reveal=False, show_take_button=False, show_cancel_button=False):
    buttons = []
    for i in range(25):
        if i in opened:
            emoji = "üí†" if i not in mines else "üí£"
        else:
            emoji = "‚ùì" if not reveal else ("üí£" if i in mines else "üí†")

        buttons.append(InlineKeyboardButton(text=emoji, callback_data=f"mine:{i}"))

    rows = [buttons[i:i + 5] for i in range(0, 25, 5)]

    if show_cancel_button:
        rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mine:cancel")])
    if show_take_button:
        rows.append([InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data="mine:take")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


@dp.callback_query(F.data.startswith("mine:"), MineGame.playing)
async def handle_mine_click(callback: CallbackQuery, state: FSMContext):
    if "mines" in disabled_games_by_chat.get(callback.message.chat.id, set()):
        return await callback.answer("üí£ –ò–≥—Ä–∞ '–ú–∏–Ω—ã' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", show_alert=True)

    action = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –ò–≥—Ä–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 0.2 —Å–µ–∫
    lock = mines_locks.setdefault(user_id, Lock())
    if lock.locked():
        return await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å...")

    async with lock:
        if user_id not in active_mines_games:
            return await callback.answer("‚ö† –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        data = await state.get_data()
        mines = data["mines"]
        opened = data["opened"]
        bet = data["bet"]

        active_mines_games[user_id] = time.time()

        if action == "cancel":
            if opened:
                return await callback.answer("‚ùå –£–∂–µ –Ω–∞—á–∞—Ç–æ.")
            active_mines_games.pop(user_id, None)
            await state.clear()
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (bet, user_id))
                await db.commit()
            await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ <b>–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞</b>.", parse_mode="HTML")
            return await callback.answer("–í–æ–∑–≤—Ä–∞—Ç")

        if action == "take":
            profit = int(bet * (1 + len(opened) * 0.35))
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (profit, user_id))
                await db.commit()
            await state.clear()
            active_mines_games.pop(user_id, None)
            await callback.message.edit_text(
                f"üí∞ –¢—ã –∑–∞–±—Ä–∞–ª: <b>{profit} üå∏</b>\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return await callback.answer("üí∞ –ó–∞–±—Ä–∞–ª!")

        try:
            cell = int(action)
        except:
            return await callback.answer("‚ùå –û—à–∏–±–∫–∞.")

        if cell in opened:
            return await callback.answer("üîÅ –£–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")

        opened.add(cell)

        if cell in mines:
            await state.clear()
            active_mines_games.pop(user_id, None)
            try:
                await callback.message.edit_text(
                    "üí• –¢—ã –ø–æ–ø–∞–ª –Ω–∞ –º–∏–Ω—É!\n‚ùå –°—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–∞.",
                    reply_markup=render_mines_buttons(opened, mines, reveal=True),
                    parse_mode="HTML"
                )
            except TelegramBadRequest:
                pass
            return await callback.answer("üí• –ë—É–º!")

        await state.update_data(opened=opened)

        try:
            await callback.message.edit_reply_markup(
                reply_markup=render_mines_buttons(opened, mines, reveal=False, show_take_button=True)
            )
        except TelegramBadRequest:
            pass

        await callback.answer("‚úÖ")




HELP_TEXT = (
    "üí† <b>–ö–æ–º–∞–Ω–¥—ã Sakura Bot</b>\n\n"
    "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
    "‚ñ´Ô∏è <b>–ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
    "‚ñ´Ô∏è <b>–º–µ—à–æ–∫</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—à–æ–∫ (–∏–ª–∏ –ø–æ —Ä–µ–ø–ª–∞—é)\n"
    "‚ñ´Ô∏è <b>–±</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
    "‚ñ´Ô∏è <b>+–º–µ—à–æ–∫ / -–º–µ—à–æ–∫</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å / –∑–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø\n\n"

    "üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b>\n"
    "‚ñ´Ô∏è <b>–ø (—Ä–µ–ø–ª–∞–π) (—Å—É–º–º–∞)</b> ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∞–∫—É—Ä—É\n\n"

    "üéÆ <b>–ò–≥—Ä—ã:</b>\n"
    "‚ñ´Ô∏è <b>–º–∏–Ω—ã (—Å—É–º–º–∞)</b> ‚Äî –∏–≥—Ä–∞ –≤ –º–∏–Ω—ã\n"
    "‚ñ´Ô∏è <b>–º–æ–Ω–µ—Ç–∞ (—Å—É–º–º–∞)</b> ‚Äî –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞\n"
    "‚ñ´Ô∏è <b>(—Å—É–º–º–∞) –∫ —á 5 9</b> ‚Äî —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ\n"
    "‚ñ´Ô∏è <b>–≥–æ</b> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
    "‚ñ´Ô∏è <b>–ª–æ–≥</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Ä—É–ª–µ—Ç–æ–∫\n"
    "‚ñ´Ô∏è <b>–¥—É—ç–ª—å (—Å—É–º–º–∞) (—Ä–µ–ø–ª–∞–π)</b> ‚Äî PvP –¥—É—ç–ª—å\n"
    "‚ñ´Ô∏è <b>—Ö–µ–ª (—Å—É–º–º–∞)</b> ‚Äî –ø–æ–∫–µ—Ä-–º–∞—Å—Ç—å –∏–≥—Ä–∞\n\n"

    "üìà <b>–ü—Ä–æ—á–µ–µ:</b>\n"
    "‚ñ´Ô∏è <b>–∏–¥</b> ‚Äî —É–∑–Ω–∞—Ç—å ID\n"
    "‚ñ´Ô∏è <b>–±–æ–Ω—É—Å</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å üå∏\n"
    "‚ñ´Ô∏è <b>–ø–∏–Ω–≥</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n\n"

    "üíé <b>–î–æ–Ω–∞—Ç:</b>\n"
    "‚ñ´Ô∏è <b>–¥–æ–Ω–∞—Ç</b> ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –õ–° –±–æ—Ç–∞"
)


def help_markup() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="help:close")
    return builder.as_markup()


@dp.message(F.text.lower().in_(["–ø–æ–º–æ—â—å", "–∫–æ–º–∞–Ω–¥—ã"]))
async def help_command(message: Message):
    await message.reply(
        HELP_TEXT,
        parse_mode="HTML",
        reply_markup=help_markup()
    )


@dp.callback_query(F.data == "help:close")
async def help_close(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()




@dp.message(F.text.lower() == "/help")
async def help_command(message: Message):
    text = (
        "üí† <b>–ö–æ–º–∞–Ω–¥—ã Sakura Bot</b>\n\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        "‚ñ´Ô∏è <b>–ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚ñ´Ô∏è <b>–º–µ—à–æ–∫</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—à–æ–∫ (–∏–ª–∏ –ø–æ —Ä–µ–ø–ª–∞—é)\n"
        "‚ñ´Ô∏è <b>–±</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "‚ñ´Ô∏è <b>+–º–µ—à–æ–∫ / -–º–µ—à–æ–∫</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å / –∑–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø\n\n"

        "üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b>\n"
        "‚ñ´Ô∏è <b>–ø (—Ä–µ–ø–ª–∞–π) (—Å—É–º–º–∞)</b> ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∞–∫—É—Ä—É\n\n"

        "üéÆ <b>–ò–≥—Ä—ã:</b>\n"
        "‚ñ´Ô∏è <b>–º–∏–Ω—ã (—Å—É–º–º–∞)</b> ‚Äî –∏–≥—Ä–∞ –≤ –º–∏–Ω—ã\n"
        "‚ñ´Ô∏è <b>–º–æ–Ω–µ—Ç–∞ (—Å—É–º–º–∞)</b> ‚Äî –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞\n"
        "‚ñ´Ô∏è <b>(—Å—É–º–º–∞) –∫ —á 5 9</b> ‚Äî —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ\n"
        "‚ñ´Ô∏è <b>–≥–æ</b> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
        "‚ñ´Ô∏è <b>–ª–æ–≥</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Ä—É–ª–µ—Ç–æ–∫\n"
        "‚ñ´Ô∏è <b>–¥—É—ç–ª—å (—Å—É–º–º–∞) (—Ä–µ–ø–ª–∞–π)</b> ‚Äî PvP –¥—É—ç–ª—å\n"
        "‚ñ´Ô∏è <b>—Ö–µ–ª (—Å—É–º–º–∞)</b> ‚Äî –ø–æ–∫–µ—Ä-–º–∞—Å—Ç—å –∏–≥—Ä–∞\n\n"

        "üìà <b>–ü—Ä–æ—á–µ–µ:</b>\n"
        "‚ñ´Ô∏è <b>–∏–¥</b> ‚Äî —É–∑–Ω–∞—Ç—å ID\n"
        "‚ñ´Ô∏è <b>–±–æ–Ω—É—Å</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å üå∏\n"
        "‚ñ´Ô∏è <b>–ø–∏–Ω–≥</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n\n"

        "üíé <b>–î–æ–Ω–∞—Ç:</b>\n"
        "‚ñ´Ô∏è <b>–¥–æ–Ω–∞—Ç</b> ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –õ–° –±–æ—Ç–∞\n\n"
        "üì¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏ –≤ –∫–∞–Ω–∞–ª–µ @settskamss"
    )

    await message.reply(text, parse_mode="HTML")







@dp.message(F.text.lower().in_(["+—á–∞—Ç", "-—á–∞—Ç"]))
async def manage_chat(message: Message):
    if message.chat.id != -1002835369234:
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    if message.text.lower() == "+—á–∞—Ç":
        perms = types.ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_send_polls=True,
            can_invite_users=True,
            can_pin_messages=True
        )
        await bot.set_chat_permissions(chat_id=message.chat.id, permissions=perms)
        await message.reply("üîì –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç. –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å.")
    else:
        perms = types.ChatPermissions(
            can_send_messages=False
        )
        await bot.set_chat_permissions(chat_id=message.chat.id, permissions=perms)
        await message.reply("üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å.")





from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

GROUP_ID = -1002835369234


@dp.message(F.text.startswith("—Å–æ–∑–¥–∞—Ç—å"))
async def create_bonus_check(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")

    args = message.text.split()
    if len(args) != 3:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: —Å–æ–∑–¥–∞—Ç—å (—Å—É–º–º–∞) (–∫–æ–ª-–≤–æ_–∞–∫—Ç–∏–≤–∞—Ü–∏–π)")

    try:
        amount = int(args[1])
        limit = int(args[2])
    except:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ —Å—É–º–º—É –∏ –∫–æ–ª-–≤–æ —á–∏—Å–ª–æ–º.")

    btns = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_bonus:{amount}:{limit}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_bonus")
        ]
    ])
    await message.reply(f"üîê –°–æ–∑–¥–∞—Ç—å –±–æ–Ω—É—Å –Ω–∞ {amount} üå∏ ‚Äî {limit} –∞–∫—Ç–∏–≤–∞—Ü–∏–π?", reply_markup=btns)


@dp.callback_query(F.data.startswith("confirm_bonus:"))
async def confirm_bonus_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)

    _, amount, limit = callback.data.split(":")
    amount = int(amount)
    limit = int(limit)

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("INSERT INTO group_bonuses (amount, max_activations) VALUES (?, ?)", (amount, limit))
        bonus_id = cursor.lastrowid
        await db.commit()

    btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üéÅ –ü–æ–ª—É—á–∏—Ç—å", callback_data=f"claim_bonus:{bonus_id}")]
    ])
    text = f"üéâ <b>–ò–≤–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç!</b>\nüéÅ –ë–æ–Ω—É—Å: <b>{amount} üå∏</b>\nüë• –ê–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{limit}</b>"
    await bot.send_message(chat_id=GROUP_ID, text=text, reply_markup=btn, parse_mode="HTML")
    await callback.message.edit_text("‚úÖ –ë–æ–Ω—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!")

@dp.callback_query(F.data == "cancel_bonus")
async def cancel_bonus(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")



@dp.callback_query(F.data.startswith("claim_bonus:"))
async def claim_bonus(callback: CallbackQuery):
    user_id = callback.from_user.id
    bonus_id = int(callback.data.split(":")[1])

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT amount, max_activations, activated_by FROM group_bonuses WHERE bonus_id = ?", (bonus_id,))
        bonus = await row.fetchone()

        if not bonus:
            try:
                await callback.answer("‚ùå –ë–æ–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            except:
                pass
            return

        amount, max_activations, activated_by_raw = bonus
        activated_by = set(map(int, activated_by_raw.split(","))) if activated_by_raw else set()

        if user_id in activated_by:
            try:
                await callback.answer("‚ùå –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —ç—Ç–æ—Ç –±–æ–Ω—É—Å.", show_alert=True)
            except:
                pass
            return

        if len(activated_by) >= max_activations:
            try:
                await callback.answer("‚ùå –ë–æ–Ω—É—Å —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.", show_alert=True)
            except:
                pass
            return

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        activated_by.add(user_id)
        await db.execute(
            "UPDATE group_bonuses SET activated_by = ? WHERE bonus_id = ?",
            (",".join(map(str, activated_by)), bonus_id)
        )
        await db.execute(
            "UPDATE users SET sakura = sakura + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()

    # üü¢ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
    try:
        await callback.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {amount} üå∏", show_alert=True)
    except:
        pass  # –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª

    # üîÑ –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    try:
        if callback.message.chat.id == GROUP_ID:
            remaining = max_activations - len(activated_by)
            new_text = (
                f"üéâ <b>–ò–≤–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç!</b>\n"
                f"üéÅ –ë–æ–Ω—É—Å: <b>{amount} üå∏</b>\n"
                f"üë• –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{remaining}</b>"
            )
            btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å", callback_data=f"claim_bonus:{bonus_id}")]
            ])
            await callback.message.edit_text(new_text, reply_markup=btn, parse_mode="HTML")
    except:
        pass




# üéÅ –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –±–æ–Ω—É—Å–∞
async def bonus_command_base(user_id: int, send):
    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ("left", "kicked"):
            raise Exception("Not subscribed")
    except:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_bonus")]
        ])
        return await send("üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=kb)

    # üéÅ –ë–æ–Ω—É—Å
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT sakura, last_bonus FROM users WHERE user_id = ?", (user_id,))
        res = await row.fetchone()

        if not res:
            return await send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        sakura, last_bonus = res
        now = datetime.now()

        if last_bonus:
            try:
                last_time = datetime.fromisoformat(last_bonus)
                if now - last_time < timedelta(hours=24):
                    remaining = timedelta(hours=24) - (now - last_time)
                    hours, remainder = divmod(remaining.seconds, 3600)
                    minutes = remainder // 60
                    return await send(f"‚è≥ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω.")
            except:
                pass

        # üí∞ –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
        new_sakura = sakura + BONUS_AMOUNT
        await db.execute("""
            UPDATE users
            SET sakura = ?, last_bonus = ?
            WHERE user_id = ?
        """, (new_sakura, now.isoformat(), user_id))
        await db.commit()

    await send(f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª <b>{BONUS_AMOUNT} üå∏</b>!\n–ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.", parse_mode="HTML")


# üì• –ë–æ–Ω—É—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ "–±–æ–Ω—É—Å"
@dp.message(F.text.lower() == "–±–æ–Ω—É—Å")
async def bonus_command(message: Message):
    await bonus_command_base(message.from_user.id, message.reply)


# üì• –ë–æ–Ω—É—Å –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
@dp.callback_query(F.data == "check_bonus")
async def check_bonus_callback(call: CallbackQuery):
    try:
        await call.message.delete()
    except:
        pass
    await bonus_command_base(call.from_user.id, call.message.answer)




@dp.message(F.text.lower().startswith("–¥—É—ç–ª—å"))
async def start_duel(message: Message):
    if "duel" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("‚öîÔ∏è –ò–≥—Ä–∞ '–î—É—ç–ª—å' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    chat_id = message.chat.id
    user = message.from_user
    user_id = user.id

    args = message.text.strip().split()
    if len(args) < 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–¥—É—ç–ª—å [—Å—É–º–º–∞] [@—é–∑–µ—Ä|id]</code>", parse_mode="HTML")

    if args[1].lower() == "–Ω–µ—Ç":
        if chat_id in duel_requests:
            duel_info = duel_requests[chat_id]
            if user_id in duel_info:
                duel_requests[chat_id].pop(user_id)
                return await message.reply("‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏.")

    try:
        amount = int(args[1])
        if amount <= 0 or amount > 10_000:
            return await message.reply("‚ö† –£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É –æ—Ç 1 –¥–æ 10000.")
    except:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    # üë§ –û–ø–ø–æ–Ω–µ–Ω—Ç
    if message.reply_to_message:
        target = message.reply_to_message.from_user
    elif len(args) >= 3:
        try:
            target_id = int(args[2]) if not args[2].startswith("@") else None
            if target_id:
                member = await bot.get_chat_member(chat_id, target_id)
                target = member.user
            else:
                return await message.reply("‚ö† –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except:
            return await message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        return await message.reply("‚ö† –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏ –µ–≥–æ ID.")

    if not target or target.id == user_id or target.is_bot:
        return await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–ª–∏ –±–æ—Ç–∞.")

    if user_id in active_duels or target.id in active_duels:
        return await message.reply("‚ö† –ö—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –≤ –¥—É—ç–ª–∏.")

    # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞ —Å–∞–∫—É—Ä—É)
    async with aiosqlite.connect(DB_PATH) as db:
        for uid in [user_id, target.id]:
            row = await db.execute("SELECT sakura FROM users WHERE user_id = ?", (uid,))
            res = await row.fetchone()
            if not res or res[0] < amount:
                return await message.reply(f"üí∏ –£ <a href='tg://user?id={uid}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä—ã.", parse_mode="HTML")

    duel_requests.setdefault(chat_id, {})[target.id] = {
        "initiator": user,
        "amount": amount,
        "msg": None
    }
    active_duels.update({user_id, target.id})

    mention = f"<a href='tg://user?id={user_id}'>{user.first_name}</a>"
    target_mention = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", callback_data=f"accept_duel:{user_id}:{amount}")
    ]])

    msg = await message.answer(
        f"üéØ {mention} –≤—ã–∑—ã–≤–∞–µ—Ç {target_mention} –Ω–∞ –¥—É—ç–ª—å –∑–∞ <b>{amount} üå∏</b>!\n"
        f"{target_mention}, —É —Ç–µ–±—è 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç.",
        reply_markup=kb,
        parse_mode="HTML"
    )
    duel_requests[chat_id][target.id]["msg"] = msg

    async def timeout_duel():
        await asyncio.sleep(DUEL_TIMEOUT)
        if chat_id in duel_requests and target.id in duel_requests[chat_id]:
            duel_requests[chat_id].pop(target.id, None)
            active_duels.discard(user_id)
            active_duels.discard(target.id)
            try:
                await msg.edit_text("‚è≥ –î—É—ç–ª—å –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. –û—Ç–º–µ–Ω–∞.")
            except:
                pass

    asyncio.create_task(timeout_duel())



@dp.callback_query(F.data.startswith("accept_duel:"))
async def accept_duel(callback: CallbackQuery):
    data = callback.data.split(":")
    initiator_id = int(data[1])
    amount = int(data[2])
    accepter = callback.from_user
    chat_id = callback.message.chat.id

    if chat_id not in duel_requests or accepter.id not in duel_requests[chat_id]:
        return await callback.answer("‚ùå –î—É—ç–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")

    if accepter.id != callback.from_user.id:
        return await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –¥—É—ç–ª—å.")

    info = duel_requests[chat_id].pop(accepter.id)
    initiator = info["initiator"]
    active_duels.discard(initiator.id)
    active_duels.discard(accepter.id)

    await callback.message.edit_text("‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

    name1 = f"<a href='tg://user?id={initiator.id}'>{initiator.first_name}</a>"
    msg = await callback.message.answer(f"üé≤ –ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫: {name1}")
    dice1 = await bot.send_dice(chat_id=chat_id, emoji="üé≤")
    roll1 = dice1.dice.value
    await asyncio.sleep(2)

    name2 = f"<a href='tg://user?id={accepter.id}'>{accepter.first_name}</a>"
    await msg.edit_text(f"üé≤ –í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫: {name2}")
    dice2 = await bot.send_dice(chat_id=chat_id, emoji="üé≤")
    roll2 = dice2.dice.value
    await asyncio.sleep(2)

    winner = None
    if roll1 > roll2:
        winner = initiator.id
        loser = accepter.id
    elif roll2 > roll1:
        winner = accepter.id
        loser = initiator.id

    async with aiosqlite.connect(DB_PATH) as db:
        if winner:
            await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (amount, winner))
            await db.execute("UPDATE users SET sakura = sakura - ? WHERE user_id = ?", (amount, loser))
        await db.commit()

    result_text = f"üé≤ {name1}: <b>{roll1}</b>\nüé≤ {name2}: <b>{roll2}</b>\n\n"
    if winner:
        result_text += f"üèÜ –ü–æ–±–µ–¥–∏–ª: <a href='tg://user?id={winner}'>–ò–≥—Ä–æ–∫</a> –∏ –ø–æ–ª—É—á–∏–ª <b>{amount} üå∏</b>"
    else:
        result_text += "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."

    await callback.message.answer(result_text, parse_mode="HTML")
    await callback.answer()






from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery



@dp.message(F.text.lower() == "/–∫—É–ø–∏–ª–∏_–∏–¥")
async def show_custom_ids(message: Message):
    if message.chat.type != "private":
        return
    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    await send_custom_id_page(message.chat.id, page=0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async def send_custom_id_page(chat_id: int, page: int):
    offset = page * PAGE_SIZE

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("""
            SELECT user_id, custom_id FROM users
            WHERE custom_id IS NOT NULL
            ORDER BY custom_id ASC
            LIMIT ? OFFSET ?
        """, (PAGE_SIZE, offset))
        users = await row.fetchall()

        count_row = await db.execute("SELECT COUNT(*) FROM users WHERE custom_id IS NOT NULL")
        total = (await count_row.fetchone())[0]

    if not users:
        return await bot.send_message(chat_id, "‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª ID.")

    lines = [f"{i + 1 + offset}. ID: <code>{cid}</code> | <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
             for i, (uid, cid) in enumerate(users)]

    # –ö–Ω–æ–ø–∫–∏
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"customid:page:{page - 1}"))
    if (offset + PAGE_SIZE) < total:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"customid:page:{page + 1}"))

    kb = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

    await bot.send_message(chat_id,
        f"üìã <b>–°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö ID (—Å—Ç—Ä. {page + 1})</b>\n\n" + "\n".join(lines),
        parse_mode="HTML",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("customid:page:"))
async def handle_custom_id_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[2])
    await callback.message.delete()
    await send_custom_id_page(callback.message.chat.id, page)
    await callback.answer()


@dp.message(F.text.lower().startswith("–¥–∞—Ç—å"))
async def admin_give_self_currency(message: Message):
    # –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
    if message.chat.type != "private":
        return

    # –¢–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∞
    if message.from_user.id != 7333809850:
        return

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–¥–∞—Ç—å 10000</code>", parse_mode="HTML")

    try:
        amount = int(args[1])
        if amount <= 0:
            return await message.reply("‚ùå –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    except:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (amount, 7333809850))
        await db.commit()

    await message.reply(f"‚úÖ –í—ã–¥–∞–Ω–æ <b>{amount} üå∏</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>7333809850</code>", parse_mode="HTML")




#–∞–¥–º–∏–Ω—ã —Å—Ç–∞—Ñ—Ñ
@dp.message(F.text.lower() == "–∫—Ç–æ –∞–¥–º–∏–Ω")
async def show_admins(message: Message):
    if message.chat.id != -1002835369234:
        return  # –¢–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ

    async with aiosqlite.connect(DB_PATH) as db:
        rows = await db.execute("SELECT user_id, rank FROM admin_ranks ORDER BY rank DESC")
        admins = await rows.fetchall()

        if not admins:
            return await message.reply("‚ö†Ô∏è –ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

        rank_titles = {
            5: "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è <b>–°–æ–∑–¥–∞—Ç–µ–ª–∏</b>",
            4: "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>",
            3: "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã</b>",
            2: "‚≠êÔ∏è‚≠êÔ∏è <b>–°—Ç–∞–∂—ë—Ä—ã</b>",
            1: "‚≠êÔ∏è <b>–ú–ª–∞–¥—à–∏–µ –∞–¥–º–∏–Ω—ã</b>",
        }

        rank_blocks = {rank: [] for rank in rank_titles}

        for uid, rank in admins:
            cursor = await db.execute("SELECT first_name FROM users WHERE user_id = ?", (uid,))
            row = await cursor.fetchone()
            name = row[0] if row else f"ID {uid}"
            mention = f"<a href='tg://user?id={uid}'>{name}</a>"
            rank_blocks[rank].append(mention)

    result = "<b>üëÆ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
    for rank in sorted(rank_titles.keys(), reverse=True):
        members = rank_blocks[rank]
        if members:
            result += f"{rank_titles[rank]}\n" + "\n".join(members) + "\n\n"

    await message.reply(result.strip(), parse_mode="HTML")



@dp.message(F.text.lower().startswith("–ø–æ–≤—ã—Å–∏—Ç—å"))
async def promote_admin(message: Message):
    if message.chat.id != -1002835369234:
        return

    if message.from_user.id != 7333809850:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å.")

    parts = message.text.strip().split()
    if len(parts) != 3:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: –ø–æ–≤—ã—Å–∏—Ç—å id —Ä–∞–Ω–≥")

    try:
        target_id = int(parts[1])
        rank = int(parts[2])
        if not (1 <= rank <= 4):
            return await message.reply("‚ö† –£–∫–∞–∂–∏ —Ä–∞–Ω–≥ –æ—Ç 1 –¥–æ 4.")
    except:
        return await message.reply("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —Ä–∞–Ω–≥–∞.")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR REPLACE INTO admin_ranks (user_id, rank) VALUES (?, ?)", (target_id, rank))
        await db.commit()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> –ø–æ–≤—ã—à–µ–Ω –¥–æ —Ä–∞–Ω–≥–∞ {rank}.", parse_mode="HTML")



@dp.message(F.text.lower().startswith("—Å–Ω—è—Ç—å"))
async def remove_admin(message: Message):
    if message.chat.id != -1002835369234:
        return

    if message.from_user.id != 7333809850:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: —Å–Ω—è—Ç—å id")

    try:
        target_id = int(parts[1])
    except:
        return await message.reply("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π ID.")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM admin_ranks WHERE user_id = ?", (target_id,))
        await db.commit()

    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏.", parse_mode="HTML")



async def get_user_rank(uid: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT rank FROM admin_ranks WHERE user_id = ?", (uid,))
        result = await row.fetchone()
        return result[0] if result else 0  # 0 ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤

async def check_access(user_id: int, action: str) -> bool:
    user_rank = await get_user_rank(user_id)
    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT min_rank FROM mod_rights WHERE action = ?", (action,))
        rule = await row.fetchone()
        return user_rank >= (rule[0] if rule else 999)

async def get_target_user(message: Message) -> types.User | None:
    if message.reply_to_message:
        return message.reply_to_message.from_user
    parts = message.text.split()
    if len(parts) >= 2:
        try:
            uid = int(parts[1])
            member = await message.bot.get_chat_member(message.chat.id, uid)
            return member.user
        except:
            return None
    return None





@dp.message(F.text.lower().startswith("–º—É—Ç"))
async def mute_user(message: Message):
    if message.chat.id != -1002835369234:
        return

    if not await check_access(message.from_user.id, "–º—É—Ç"):
        return await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É—Ç.")

    # üéØ –¶–µ–ª—å ‚Äî reply –∏–ª–∏ ID
    target = await get_target_user(message)
    if not target:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ ID/username.")

    # üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 1 —á–∞—Å
    until = datetime.utcnow() + timedelta(hours=1)

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until
        )
        await message.reply(
            f"üîá {target.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ <b>1 —á–∞—Å</b>.",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")



def parse_duration(text: str) -> timedelta:
    import re
    match = re.match(r"(\d+)([—á–º–¥])", text)
    if not match:
        return timedelta(minutes=10)
    num, unit = match.groups()
    num = int(num)
    if unit == "–º":
        return timedelta(minutes=num)
    elif unit == "—á":
        return timedelta(hours=num)
    elif unit == "–¥":
        return timedelta(days=num)
    return timedelta(minutes=10)



@dp.message(F.text.lower().startswith("!–¥–∫"))
async def set_mod_rank(message: Message):
    if message.from_user.id != 7333809850:
        return

    parts = message.text.lower().split()
    if len(parts) != 3:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: !–¥–∫ [–¥–µ–π—Å—Ç–≤–∏–µ] [—Ä–∞–Ω–≥]\n–ù–∞–ø—Ä–∏–º–µ—Ä: !–¥–∫ –º—É—Ç 2")

    action = parts[1]
    try:
        rank = int(parts[2])
        if not (1 <= rank <= 5):
            return await message.reply("‚ö† –£–∫–∞–∂–∏ —Ä–∞–Ω–≥ –æ—Ç 1 –¥–æ 5.")
    except:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ —Ä–∞–Ω–≥ —á–∏—Å–ª–æ–º.")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO mod_rights (action, min_rank)
            VALUES (?, ?) ON CONFLICT(action) DO UPDATE SET min_rank = excluded.min_rank
        """, (action, rank))
        await db.commit()

    await message.reply(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ <b>{action}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å —Ä–∞–Ω–≥–∞ <b>{rank}</b>.", parse_mode="HTML")



@dp.message(F.text.lower() == "!–º–¥–∫")
async def show_mod_ranks(message: Message):
    if message.from_user.id != 7333809850:
        return

    async with aiosqlite.connect(DB_PATH) as db:
        rows = await db.execute("SELECT action, min_rank FROM mod_rights")
        data = await rows.fetchall()

    lines = [f"üîß <b>{a}</b> ‚Äî —Å —Ä–∞–Ω–≥–∞ <b>{r}</b>" for a, r in data]
    await message.reply("\n".join(lines), parse_mode="HTML")



@dp.message(F.text.lower().startswith("—Ä–∞–∑–º—É—Ç"))
async def unmute_user(message: Message):
    if message.chat.id != -1002835369234:
        return

    if not await check_access(message.from_user.id, "—Ä–∞–∑–º—É—Ç"):
        return await message.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–º—É—Ç–∏—Ç—å.")

    target = await get_target_user(message)
    if not target:
        return await message.reply("‚ö† –£–∫–∞–∂–∏ ID –∏–ª–∏ —Å–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π.")

    try:
        await message.bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target.id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {e}")



@dp.message(F.text.startswith("/–±–∞–Ω"))
async def ban_user(message: Message):
    CHAT_ID = -1002835369234  # –£–∫–∞–∂–∏ ID –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    if message.chat.id != CHAT_ID:
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è)
    if not await check_access(message.from_user.id, "–±–∞–Ω"):
        return await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    # üìå –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ª–∏–±–æ –ø–æ reply, –ª–∏–±–æ –ø–æ ID
    target_user = None

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        args = message.text.split()
        if len(args) < 2:
            return await message.reply("‚ö† –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try:
            user_id = int(args[1])
            chat_member = await message.bot.get_chat_member(message.chat.id, user_id)
            target_user = chat_member.user
        except Exception as e:
            return await message.reply(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # üîí –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±–∞–Ω–∏—Ç—å
    try:
        await message.bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.id)
        await message.reply(
            f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{target_user.full_name}</b> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>.",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")







@dp.message(F.text.lower().startswith("/—Ä–∞–∑–±–∞–Ω"))
async def unban_user(message: Message):
    CHAT_ID = -1002835369234  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π ID —á–∞—Ç–∞

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
    if message.chat.id != CHAT_ID:
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await check_access(message.from_user.id, "—Ä–∞–∑–±–∞–Ω"):
        return await message.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")

    # üéØ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–ø–ª–∞—é –∏–ª–∏ ID
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user
    else:
        args = message.text.split()
        if len(args) < 2:
            return await message.reply("‚ö† –£–∫–∞–∂–∏ ID –∏–ª–∏ —Å–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π.")
        try:
            user_id = int(args[1])
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            target = member.user
        except Exception as e:
            return await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # üîì –†–∞–∑–±–∞–Ω
    try:
        await message.bot.unban_chat_member(
            chat_id=message.chat.id,
            user_id=target.id,
            only_if_banned=True
        )
        await message.reply(f"‚úÖ {target.mention_html()} —Ä–∞–∑–±–∞–Ω–µ–Ω.", parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")




@dp.message(F.text.lower().startswith("-—Å–º—Å"))
async def delete_message_pair(message: Message):
    if message.chat.id != -1002835369234:
        return

    if not await check_access(message.from_user.id, "—Å–º—Å"):
        return await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å -—Å–º—Å.")

    if not message.reply_to_message:
        return await message.reply("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    try:
        # –£–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")



@dp.message(F.text.lower() == "–¥–æ–Ω–∞—Ç")
async def donate_command(message: Message):
    if message.chat.type != "private":
        return await message.reply(
            "‚ö† –ö–æ–º–∞–Ω–¥–∞ <b>–¥–æ–Ω–∞—Ç</b> –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            parse_mode="HTML"
        )

    user = message.from_user
    mention = f"<b>{user.first_name}</b>"

    text = (
        f"üí† –ü—Ä–∏–≤–µ—Ç, {mention}!\n"
        f"–¢—ã –ø–æ–ø–∞–ª –≤ <b>—Ä–∞–∑–¥–µ–ª –¥–æ–Ω–∞—Ç–∞</b>.\n\n"
        f"<b>üí† –ü—Ä–∞–π—Å—ã –Ω–∞ —Å–∞–∫—É—Ä—É:</b>\n"
        f"1. <b>100 000</b> üå∏ ‚Äî <b>50</b> ‚≠êÔ∏è\n"
        f"2. <b>204 000</b> üå∏ ‚Äî <b>100</b> ‚≠êÔ∏è\n"
        f"3. <b>525 000</b> üå∏ ‚Äî <b>250</b> ‚≠êÔ∏è\n"
        f"4. <b>1 150 000</b> üå∏ ‚Äî <b>500</b> ‚≠êÔ∏è\n\n"
        f"<b>üí† –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ–Ω–∞—Ç?</b>\n"
        f"–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ ‚Äî <b>–æ—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É</b> –∏–ª–∏ <b>üß∏–ø–æ–¥–∞—Ä–æ–∫</b> –Ω–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ.\n\n"
        f"üì• –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–∞–∫—É—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º!"
    )

    # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏—Ç—å
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://t.me/ketanawin")]
    ])

    await message.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)





ARTICLES = [
    # –†–§
    ("–°—Ç–∞—Ç—å—è 105 –£–ö –†–§", "–£–±–∏–π—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—å—è 158 –£–ö –†–§", "–ö—Ä–∞–∂–∞"),
    ("–°—Ç–∞—Ç—å—è 159 –£–ö –†–§", "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—å—è 228 –£–ö –†–§", "–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–π –æ–±–æ—Ä–æ—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤"),
    ("–°—Ç–∞—Ç—å—è 131 –£–ö –†–§", "–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ"),
    ("–°—Ç–∞—Ç—å—è 111 –£–ö –†–§", "–ü—Ä–∏—á–∏–Ω–µ–Ω–∏–µ —Ç—è–∂–∫–æ–≥–æ –≤—Ä–µ–¥–∞ –∑–¥–æ—Ä–æ–≤—å—é"),
    ("–°—Ç–∞—Ç—å—è 213 –£–ö –†–§", "–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—å—è 282 –£–ö –†–§", "–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏"),
    ("–°—Ç–∞—Ç—å—è 163 –£–ö –†–§", "–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—å—è 264 –£–ö –†–§", "–ü—å—è–Ω–æ–µ –≤–æ–∂–¥–µ–Ω–∏–µ"),

    # –£–∫—Ä–∞–∏–Ω–∞
    ("–°—Ç–∞—Ç—Ç—è 115 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–£–º–∏—Å–Ω–µ –≤–±–∏–≤—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—Ç—è 185 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ö—Ä–∞–¥—ñ–∂–∫–∞"),
    ("–°—Ç–∞—Ç—Ç—è 190 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–®–∞—Ö—Ä–∞–π—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—Ç—è 307 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ó–±—É—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫—ñ–≤"),
    ("–°—Ç–∞—Ç—Ç—è 152 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ó–≥–≤–∞–ª—Ç—É–≤–∞–Ω–Ω—è"),
    ("–°—Ç–∞—Ç—Ç—è 121 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–¢—ñ–ª–µ—Å–Ω—ñ —É—à–∫–æ–¥–∂–µ–Ω–Ω—è"),
    ("–°—Ç–∞—Ç—Ç—è 296 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–•—É–ª—ñ–≥–∞–Ω—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—Ç—è 161 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–†–æ–∑–ø–∞–ª—é–≤–∞–Ω–Ω—è –≤–æ—Ä–æ–∂–Ω–µ—á—ñ"),
    ("–°—Ç–∞—Ç—Ç—è 189 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–í–∏–º–∞–≥–∞–Ω–Ω—è"),
    ("–°—Ç–∞—Ç—Ç—è 286 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ü–î–† —É —Å—Ç–∞–Ω—ñ —Å–ø‚Äô—è–Ω—ñ–Ω–Ω—è"),

    # –†–§ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
    ("–°—Ç–∞—Ç—å—è 134 –£–ö –†–§", "–ü–æ–ª–æ–≤–æ–µ —Å–Ω–æ—à–µ–Ω–∏–µ —Å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–º"),
    ("–°—Ç–∞—Ç—å—è 242 –£–ö –†–§", "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–∏"),
    ("–°—Ç–∞—Ç—å—è 127 –£–ö –†–§", "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –ª–∏—à–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥—ã"),
    ("–°—Ç–∞—Ç—å—è 126 –£–ö –†–§", "–ü–æ—Ö–∏—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞"),
    ("–°—Ç–∞—Ç—å—è 160 –£–ö –†–§", "–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞—Å—Ç—Ä–∞—Ç–∞"),
    ("–°—Ç–∞—Ç—å—è 201 –£–ö –†–§", "–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è–º–∏"),
    ("–°—Ç–∞—Ç—å—è 205 –£–ö –†–§", "–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–∫—Ç"),
    ("–°—Ç–∞—Ç—å—è 206 –£–ö –†–§", "–ó–∞—Ö–≤–∞—Ç –∑–∞–ª–æ–∂–Ω–∏–∫–∞"),
    ("–°—Ç–∞—Ç—å—è 207 –£–ö –†–§", "–ó–∞–≤–µ–¥–æ–º–æ –ª–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–µ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞"),
    ("–°—Ç–∞—Ç—å—è 210 –£–ö –†–§", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"),

    # –£–∫—Ä–∞–∏–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
    ("–°—Ç–∞—Ç—Ç—è 125 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–£–º–∏—Å–Ω–µ –ª–µ–≥–∫–µ —Ç—ñ–ª–µ—Å–Ω–µ —É—à–∫–æ–¥–∂–µ–Ω–Ω—è"),
    ("–°—Ç–∞—Ç—Ç—è 289 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ù–µ–∑–∞–∫–æ–Ω–Ω–µ –∑–∞–≤–æ–ª–æ–¥—ñ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"),
    ("–°—Ç–∞—Ç—Ç—è 296 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–•—É–ª—ñ–≥–∞–Ω—Å—Ç–≤–æ"),
    ("–°—Ç–∞—Ç—Ç—è 286-1 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ö–µ—Ä—É–≤–∞–Ω–Ω—è —É –Ω–µ—Ç–≤–µ—Ä–µ–∑–æ–º—É —Å—Ç–∞–Ω—ñ"),
    ("–°—Ç–∞—Ç—Ç—è 358 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü—ñ–¥—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"),
    ("–°—Ç–∞—Ç—Ç—è 345 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü–æ–≥—Ä–æ–∑–∞ –∞–±–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ —â–æ–¥–æ –ø–æ–ª—ñ—Ü–µ–π—Å—å–∫–æ–≥–æ"),
    ("–°—Ç–∞—Ç—Ç—è 395 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–≥–ª—è–¥—É"),
    ("–°—Ç–∞—Ç—Ç—è 348 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü–æ—Å—è–≥–∞–Ω–Ω—è –Ω–∞ –∂–∏—Ç—Ç—è –ø—Ä–∞–≤–æ–æ—Ö–æ—Ä–æ–Ω—Ü—è"),
    ("–°—Ç–∞—Ç—Ç—è 368 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–û–¥–µ—Ä–∂–∞–Ω–Ω—è —Ö–∞–±–∞—Ä–∞"),
    ("–°—Ç–∞—Ç—Ç—è 379 –ö–ö –£–∫—Ä–∞—ó–Ω–∏", "–ü–æ—Å—è–≥–∞–Ω–Ω—è –Ω–∞ –∂–∏—Ç—Ç—è –∂—É—Ä–Ω–∞–ª—ñ—Å—Ç–∞"),

    # –ö–æ–º–∏—á–Ω—ã–µ –∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ
    ("–°—Ç–∞—Ç—å—è 245 –£–ö –†–§", "–ñ–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"),
    ("–°—Ç–∞—Ç—å—è 256 –£–ö –†–§", "–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –¥–æ–±—ã—á–∞ –≤–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"),
    ("–°—Ç–∞—Ç—å—è 214 –£–ö –†–§", "–í–∞–Ω–¥–∞–ª–∏–∑–º"),
    ("–°—Ç–∞—Ç—å—è 272 –£–ö –†–§", "–ù–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É"),
    ("–°—Ç–∞—Ç—å—è 273 –£–ö –†–§", "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"),
    ("–°—Ç–∞—Ç—å—è 274 –£–ö –†–§", "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º"),
    ("–°—Ç–∞—Ç—å—è 207.1 –£–ö –†–§", "–§–µ–π–∫–∏ –ø—Ä–æ –∞—Ä–º–∏—é –†–§"),
    ("–°—Ç–∞—Ç—å—è 280 –£–ö –†–§", "–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º—É"),
    ("–°—Ç–∞—Ç—å—è 354.1 –£–ö –†–§", "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –Ω–∞—Ü–∏–∑–º–∞"),
    ("–°—Ç–∞—Ç—å—è 137 –£–ö –†–§", "–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–Ω–æ–π –∂–∏–∑–Ω–∏"),

    # –ï—â—ë +10 üá∑üá∫
    ("–°—Ç–∞—Ç—å—è 116 –£–ö –†–§", "–ü–æ–±–æ–∏"),
    ("–°—Ç–∞—Ç—å—è 119 –£–ö –†–§", "–£–≥—Ä–æ–∑–∞ —É–±–∏–π—Å—Ç–≤–æ–º"),
    ("–°—Ç–∞—Ç—å—è 125 –£–ö –†–§", "–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
    ("–°—Ç–∞—Ç—å—è 141 –£–ö –†–§", "–í–æ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞–º"),
    ("–°—Ç–∞—Ç—å—è 148 –£–ö –†–§", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤ –≤–µ—Ä—É—é—â–∏—Ö"),
    ("–°—Ç–∞—Ç—å—è 158.1 –£–ö –†–§", "–ö—Ä–∞–∂–∞ —É –±–ª–∏–∑–∫–∏—Ö"),
    ("–°—Ç–∞—Ç—å—è 162 –£–ö –†–§", "–†–∞–∑–±–æ–π"),
    ("–°—Ç–∞—Ç—å—è 170 –£–ö –†–§", "–ü–æ–¥–¥–µ–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
    ("–°—Ç–∞—Ç—å—è 180 –£–ö –†–§", "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞"),
    ("–°—Ç–∞—Ç—å—è 186 –£–ö –†–§", "–ü–æ–¥–¥–µ–ª–∫–∞ –¥–µ–Ω–µ–≥")
]



@dp.message(F.text.lower() == "–º–æ—è —Å—Ç–∞—Ç—å—è")
async def my_article(message: Message):
    if message.chat.type == "private":
        return await message.reply("‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    uid = message.from_user.id
    cid = message.chat.id

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute(
            "SELECT article_index, last_used FROM user_articles WHERE user_id = ? AND chat_id = ?",
            (uid, cid)
        )
        result = await row.fetchone()

        now = datetime.utcnow()

        if result:
            index, last_used_raw = result
            if last_used_raw:
                last_used = datetime.fromisoformat(last_used_raw)
                if now - last_used < timedelta(hours=24):
                    left = timedelta(hours=24) - (now - last_used)
                    hours, remainder = divmod(int(left.total_seconds()), 3600)
                    minutes = remainder // 60
                    return await message.reply(
                        f"‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—å—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n–ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω."
                    )
        else:
            index = random.randint(0, len(ARTICLES) - 1)
            await db.execute(
                "INSERT INTO user_articles (user_id, chat_id, article_index, last_used) VALUES (?, ?, ?, ?)",
                (uid, cid, index, now.isoformat())
            )
            await db.commit()

        # –û–±–Ω–æ–≤–∏–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await db.execute(
            "UPDATE user_articles SET last_used = ? WHERE user_id = ? AND chat_id = ?",
            (now.isoformat(), uid, cid)
        )
        await db.commit()

    title, text = ARTICLES[index]
    mention = f"<a href='tg://user?id={uid}'>{message.from_user.first_name}</a>"

    await message.reply(
        f"üßæ –°–µ–≥–æ–¥–Ω—è {mention} –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∫:\n\n"
        f"<b>{title}</b>\n<i>{text}</i>",
        parse_mode="HTML"
    )


@dp.message(F.text.lower().startswith("–ø—Ä–æ–¥–∞—Ç—å "))
async def sell_chips(message: Message):
    user = message.from_user
    args = message.text.strip().split()

    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–ø—Ä–æ–¥–∞—Ç—å 2</code>", parse_mode="HTML")

    try:
        count = int(args[1])
        if count <= 0:
            return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ —á–∏—Å–ª–æ–º.")

    price_per_chip = 4000
    total_gain = count * price_per_chip

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT chips FROM users WHERE user_id = ?", (user.id,))
        result = await row.fetchone()
        balance = result[0] if result else 0

        if balance < count:
            return await message.reply(
                f"‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫.\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {count}"
            )

        await db.execute("""
            UPDATE users SET chips = chips - ?, sakura = sakura + ?
            WHERE user_id = ?
        """, (count, total_gain, user.id))
        await db.commit()

    await message.reply(
        f"üí± –¢—ã –ø—Ä–æ–¥–∞–ª <b>{count}</b> —Ñ–∏—à–µ–∫ [‚ô†Ô∏è Poker Chip] –∏ –ø–æ–ª—É—á–∏–ª <b>{total_gain} üå∏</b>",
        parse_mode="HTML"
    )



@dp.message(F.text.lower().startswith("—Ö–µ–ª"))
async def hel_game(message: Message):
    if "hel" in disabled_games_by_chat.get(message.chat.id, set()):
        return await message.reply("üî• –ò–≥—Ä–∞ '–•–µ–ª' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    if message.chat.type not in ("group", "supergroup"):
        return await message.reply("‚ö† –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    user_id = message.from_user.id
    chat_id = message.chat.id

    # üõ° –ë–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
    if chat_id in active_hel_games and user_id in active_hel_games[chat_id]:
        return await message.reply("‚ö† –£ —Ç–µ–±—è —É–∂–µ –Ω–∞—á–∞—Ç–∞ –∏–≥—Ä–∞. –ó–∞–≤–µ—Ä—à–∏ –µ—ë –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π.")

    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>—Ö–µ–ª 1</code>", parse_mode="HTML")

    try:
        bet = int(parts[1])
        if bet <= 0:
            raise ValueError()
    except:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫.")

    async with aiosqlite.connect(DB_PATH) as db:
        row = await db.execute("SELECT chips FROM users WHERE user_id = ?", (user_id,))
        res = await row.fetchone()
        balance = res[0] if res else 0

        if balance < bet:
            return await message.reply(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫. –£ —Ç–µ–±—è: {balance}, –Ω—É–∂–Ω–æ: {bet}")

        await db.execute("UPDATE users SET chips = chips - ? WHERE user_id = ?", (bet, user_id))
        await db.commit()

    active_hel_games.setdefault(chat_id, {})[user_id] = {"bet": bet}

    mention = f"<a href='tg://user?id={user_id}'>{message.from_user.first_name}</a>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ô†Ô∏è", callback_data="hel:spade"),
        InlineKeyboardButton(text="‚ô£Ô∏è", callback_data="hel:club"),
        InlineKeyboardButton(text="‚ô•Ô∏è", callback_data="hel:heart"),
        InlineKeyboardButton(text="‚ô¶Ô∏è", callback_data="hel:diamond")
    ]])

    await message.reply(
        f"{mention}\n–í—ã–±–µ—Ä–∏ –º–∞—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—å —É–¥–∞—á—É:",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("hel:"))
async def hel_choice(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    choice = call.data.split(":")[1]

    if chat_id not in active_hel_games or user_id not in active_hel_games[chat_id]:
        return await call.answer("‚ö† –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    user_data = active_hel_games[chat_id].pop(user_id, None)
    if not user_data:
        return await call.answer("‚ö† –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    bet_fish = user_data["bet"]
    base_value = bet_fish * 5000  # 1 —Ñ–∏—à–∫–∞ = 5000 —Å–∞–∫—É—Ä

    user_mention = f"<a href='tg://user?id={user_id}'>{call.from_user.first_name}</a>"

    suits = {
        "spade": "‚ô†Ô∏è",
        "club": "‚ô£Ô∏è",
        "heart": "‚ô•Ô∏è",
        "diamond": "‚ô¶Ô∏è"
    }

    multipliers = {
        "‚ô†Ô∏è": 2,
        "‚ô•Ô∏è": 2.5,
        "‚ô£Ô∏è": 3,
        "‚ô¶Ô∏è": 4
    }

    # üéØ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –º–∞—Å—Ç–∏
    drop = random.choices(
        population=["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô£Ô∏è", "‚ô¶Ô∏è"],
        weights=[50, 30, 15, 5],  # —á–µ–º –≤—ã—à–µ –≤–µ—Å, —Ç–µ–º —á–∞—â–µ –≤—ã–ø–∞–¥–∞–µ—Ç
        k=1
    )[0]

    user_pick = suits.get(choice)
    win = (user_pick == drop)
    multiplier = multipliers.get(drop, 0)
    profit = int(base_value * multiplier) if win else 0

    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    try:
        animation = await call.message.answer_animation("https://i.gifer.com/E3wf.gif")
        await asyncio.sleep(4)
        await animation.delete()
    except:
        pass

    if win:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (profit, user_id))
            await db.commit()

    # –ª–æ–≥
    hell_game_history.setdefault(chat_id, []).append(drop)
    if len(hell_game_history[chat_id]) > 10:
        hell_game_history[chat_id] = hell_game_history[chat_id][-10:]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO hel_logs (chat_id, user_id, symbol, timestamp)
            VALUES (?, ?, ?, ?)
        """, (chat_id, user_id, drop, datetime.utcnow().isoformat()))
        await db.commit()

    result_text = (
        f"{user_mention}\n"
        f"üé¥ –í—ã–ø–∞–ª–∞ –º–∞—Å—Ç—å: <b>{drop}</b>\n"
        f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: <b>x{multiplier}</b>\n"
        f"{'üéâ –ü–æ–±–µ–¥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>' + str(profit) + ' üå∏</b>!' if win else 'üí• –£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.'}"
    )
    await call.message.answer(result_text, parse_mode="HTML")
    await call.answer()






@dp.message(F.text.lower() == ".–ª–æ–≥")
async def hel_log(message: Message):
    if message.chat.type not in ("group", "supergroup"):
        return  # –¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö

    chat_id = message.chat.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT symbol FROM hel_logs
            WHERE chat_id = ?
            ORDER BY id DESC
            LIMIT 10
        """, (chat_id,))
        rows = await cursor.fetchall()

    if not rows:
        return await message.reply("üï≥ –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥ –ø—É—Å—Ç.")

    symbol_names = {
        "‚ô†Ô∏è": "–ü–∏–∫–∏",
        "‚ô£Ô∏è": "–¢—Ä–µ—Ñ—ã",
        "‚ô•Ô∏è": "–ß–µ—Ä–≤—ã",
        "‚ô¶Ô∏è": "–ë—É–±–Ω—ã"
    }

    lines = [
        f"{i + 1}. {symbol_names.get(s, s)} {s}"
        for i, (s,) in enumerate(rows)
    ]

    text = "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—ã–ø–∞–¥–µ–Ω–∏–π –º–∞—Å—Ç–µ–π:</b>\n" + "\n".join(lines)
    await message.reply(text, parse_mode="HTML")




@dp.message(F.new_chat_members)
async def handle_new_members(message: Message):
    chat_id = message.chat.id

    for member in message.new_chat_members:
        if member.is_bot:
            continue

        inviter = message.from_user
        if inviter.id == member.id:
            continue

        async with aiosqlite.connect(DB_PATH) as db:
            row = await db.execute(
                "SELECT 1 FROM invited_users WHERE chat_id = ? AND invited_id = ?",
                (chat_id, member.id)
            )
            already_invited = await row.fetchone()

            if already_invited:
                return

            await db.execute(
                "INSERT INTO invited_users (chat_id, invited_id, inviter_id) VALUES (?, ?, ?)",
                (chat_id, member.id, inviter.id)
            )
            await db.execute(
                "UPDATE users SET sakura = sakura + 3000 WHERE user_id = ?",
                (inviter.id,)
            )
            await db.commit()

        await message.answer(
            f"üéâ <a href='tg://user?id={inviter.id}'>{inviter.first_name}</a> –ø—Ä–∏–≥–ª–∞—Å–∏–ª <b>{member.first_name}</b> –∏ –ø–æ–ª—É—á–∏–ª <b>3000 üå∏</b>!",
            parse_mode="HTML"
        )





@dp.message(F.text.lower().startswith("/–æ—á–∏—Å—Ç–∏—Ç—å"))
async def clear_custom_id(message: Message):
    # üîí –¢–æ–ª—å–∫–æ –≤ –õ–°
    if message.chat.type != "private":
        return

    # üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    args = message.text.strip().split()
    if len(args) != 2:
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: /–æ—á–∏—Å—Ç–∏—Ç—å ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    try:
        target_id = int(args[1])
    except:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        row = await db.execute("SELECT custom_id FROM users WHERE user_id = ?", (target_id,))
        res = await row.fetchone()

        if not res:
            return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        custom_id = res[0]
        if not custom_id:
            return await message.reply("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ ID.")

        # –û—á–∏—â–∞–µ–º custom_id
        await db.execute("UPDATE users SET custom_id = NULL WHERE user_id = ?", (target_id,))
        await db.commit()

    await message.reply(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π ID <b>{custom_id}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_id}</code>.", parse_mode="HTML")




@dp.message(F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞")
async def chat_rules(message: Message):
    allowed_chat_id = -1002835369234

    if message.chat.id != allowed_chat_id:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö

    text = (
        "<b>üìú –ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê</b>\n\n"
        "1. ‚ñ´Ô∏è –õ—é–±–∞—è —Ñ–æ—Ä–º–∞ —Ä–µ–∫–ª–∞–º—ã ‚Äî <b>–±–∞–Ω</b>\n"
        "2. ‚ñ´Ô∏è –ü—Ä–æ–¥–∞–∂–∏ ‚Äî <b>–º—É—Ç/–±–∞–Ω</b>\n"
        "3. ‚ñ´Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ ‚Äî <b>–º—É—Ç/–±–∞–Ω</b>\n"
        "4. ‚ñ´Ô∏è –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —Ä–æ–¥–Ω—ã—Ö ‚Äî <b>–º—É—Ç/–±–∞–Ω</b>\n"
    )
    await message.reply(text, parse_mode="HTML")



# –ê–¥–º–∏–Ω ID

# üì• –ö–æ–º–∞–Ω–¥–∞ /—Å–æ–∑–¥–∞—Ç—å (—Ç–æ–ª—å–∫–æ –≤ –õ–° –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(F.text.lower().startswith("/—Å–æ–∑–¥–∞—Ç—å"))
async def create_promo(message: Message):
    if message.chat.type != "private":
        return

    if message.from_user.id not in ADMINS:
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

    args = message.text.strip().split()
    if len(args) != 4 or not args[1].startswith("#"):
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: /—Å–æ–∑–¥–∞—Ç—å #–ø—Ä–æ–º–æ 1000 5")

    code = args[1].lower()
    try:
        amount = int(args[2])
        count = int(args[3])
    except:
        return await message.reply("‚ùå –°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS promocodes (
                code TEXT PRIMARY KEY,
                amount INTEGER,
                activations_left INTEGER
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS promo_usages (
                code TEXT,
                user_id INTEGER,
                PRIMARY KEY (code, user_id)
            )
        """)
        await db.execute(
            "INSERT OR REPLACE INTO promocodes (code, amount, activations_left) VALUES (?, ?, ?)",
            (code, amount, count)
        )
        await db.commit()

    await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —Å–æ–∑–¥–∞–Ω: {amount} üå∏, {count} –∞–∫—Ç–∏–≤–∞—Ü–∏–π.", parse_mode="HTML")



# üì• –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ –≤ —á–∞—Ç–µ: –ø—Ä–æ–º–æ #–∫–æ–¥
@dp.message(F.text.lower().startswith("–ø—Ä–æ–º–æ "))
async def activate_promo(message: Message):
    args = message.text.strip().split()
    if len(args) != 2 or not args[1].startswith("#"):
        return await message.reply("‚ö† –§–æ—Ä–º–∞—Ç: <code>–ø—Ä–æ–º–æ #–∫–æ–¥</code>", parse_mode="HTML")

    code = args[1].lower()
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        row = await db.execute("SELECT amount, activations_left FROM promocodes WHERE code = ?", (code,))
        promo = await row.fetchone()
        if not promo:
            return await message.reply("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        amount, left = promo
        if left <= 0:
            return await message.reply("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        row = await db.execute("SELECT 1 FROM promo_usages WHERE code = ? AND user_id = ?", (code, user_id))
        if await row.fetchone():
            return await message.reply("‚ö†Ô∏è –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")

        # –í—ã–¥–∞—á–∞ –∏ —É—á—ë—Ç
        await db.execute("INSERT INTO promo_usages (code, user_id) VALUES (?, ?)", (code, user_id))
        await db.execute("UPDATE promocodes SET activations_left = activations_left - 1 WHERE code = ?", (code,))
        await db.execute("UPDATE users SET sakura = sakura + ? WHERE user_id = ?", (amount, user_id))
        await db.commit()

    await message.reply(f"üéÅ –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –∏ –ø–æ–ª—É—á–∏–ª <b>{amount} üå∏</b>!", parse_mode="HTML")




GAMES = {
    "roulette": "üé∞ –†—É–ª–µ—Ç–∫–∞",
    "hel": "üî• –•–µ–ª",
    "log": "üìú –õ–æ–≥",
    "go": "üéØ /–≥–æ",
    "mines": "üí£ –ú–∏–Ω—ã",
    "duel": "‚öîÔ∏è –î—É—ç–ª—å"
}
disabled_games_by_chat = {}



@dp.message(F.text.lower() == "/setgames")
async def set_games_command(message: Message):
    if message.chat.type == "private":
        return await message.reply("‚ö† –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    chat_id = message.chat.id
    disabled = disabled_games_by_chat.get(chat_id, set())

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{'‚úÖ' if game not in disabled else '‚ùå'} {label}",
                    callback_data=f"togglegame:{game}"
                )
            ] for game, label in GAMES.items()
        ]
    )

    await message.reply("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–≥—Ä—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å:", reply_markup=keyboard)



@dp.callback_query(F.data.startswith("togglegame:"))
async def toggle_game_handler(call: CallbackQuery):
    game_code = call.data.split(":")[1]
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    member = await bot.get_chat_member(chat_id, user_id)
    if member.status not in ("administrator", "creator"):
        return await call.answer("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.", show_alert=True)

    disabled = disabled_games_by_chat.setdefault(chat_id, set())

    if game_code in disabled:
        disabled.remove(game_code)
    else:
        disabled.add(game_code)

    save_disabled_games()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{'‚úÖ' if g not in disabled else '‚ùå'} {label}",
                    callback_data=f"togglegame:{g}"
                )
            ] for g, label in GAMES.items()
        ]
    )

    await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")



rules_text = """
<b>üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ Sakura</b>
<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é. –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–ª–µ—á—ë—Ç —Å–∞–Ω–∫—Ü–∏–∏.</i>

<b>1.</b> –õ—é–±—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞ <b>—Ç–æ–ª—å–∫–æ –∑–∞ –≤–∞–ª—é—Ç—É ‚Äî —Å–∞–∫—É—Ä–∞.</b>
–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–ø–æ–º—è–Ω—É—Ç–æ, —á—Ç–æ —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ <b>—Å–∞–∫—É—Ä–µ</b> ‚Äî –≤–∞–ª—é—Ç–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞.

<b>2.</b> <b>–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞</b> –∑–∞–¥–∞–Ω–∏–π/–±–æ—Ç–æ–≤/—É—Å–ª—É–≥, –≥–¥–µ:
‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ <b>–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞);  
‚Äî –µ—Å—Ç—å <b>—Å–ª–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª–∏—Ç–∏–∫–∞, –¥–æ–∫—Å–∏–Ω–≥, –æ—Å–∏–Ω—Ç –∏ —Ç.–¥.</b>  
‚Äî —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –±–æ—Ç—ã: –≥–ª–∞–∑ –±–æ–≥–∞, —Ñ–∞–Ω —Å—Ç–∞—Ç, —Ä–µ—Ñ-–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º, —Å–≤–∞—Ç –∏ –ø—Ä–æ—á–µ–µ.

<b>3.</b> <b>–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è</b>, –∞–≥—Ä–µ—Å—Å–∏—è, –º–∞—Ç—ã, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ <i>—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤</i> ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω—ã.  
–¢–∞–∫–∂–µ –∑–∞–ø—Ä–µ—â—ë–Ω <b>–ø–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π</b>.

<b>4.</b> <b>–ê–¥–º–∏–Ω</b> –≤–ø—Ä–∞–≤–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ñ—Ñ—Ç–æ–ø.

<b>5.</b> –î–æ–ø—É—Å—Ç–∏–º—ã–µ —è–∑—ã–∫–∏ –æ–±—â–µ–Ω–∏—è: <b>—Ä—É—Å—Å–∫–∏–π, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π</b>.

<b>6.</b> –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—é –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ ‚Äî –æ–Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è <b>–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º</b>.

<b>üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç:</b>
–†–∞–∑—Ä–µ—à—ë–Ω <b>—Ç–æ–ª—å–∫–æ</b> –º–µ–∂–¥—É: <b>–≥—Ä–∞–º–º ‚Üî —Å–∞–∫—É—Ä–∞ ‚Üî –∏—Ä–∏—Å</b>  
‚Äî 1 –∏—Ä–∏—Å–∫–∞ = 4000 —Å–∞–∫—É—Ä  
‚Äî 2000 –≥—Ä–∞–º–º = 4000 —Å–∞–∫—É—Ä  
"""

@dp.message(Command(commands=["rules", "–ø—Ä–∞–≤–∏–ª–∞"]))
async def send_rules(message: Message):
    if message.chat.id != SAKURA_RULES_CHAT_ID:
        return await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —á–∞—Ç–µ.")

    await message.answer(rules_text, parse_mode="HTML")




# üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã: –ø–∏–Ω–≥
@dp.message(F.text.lower() == "–ø–∏–Ω–≥")
async def ping(message: Message):
    await message.reply("–ü–æ–Ω–≥!")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await init_db()  # ‚Üê –≤–æ—Ç —Ç—É—Ç
    await dp.start_polling(bot)
    await ensure_blacklist_table()
    await init_db()


# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import asyncio

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    load_spin_log()
    load_daily_top()
    load_disabled_games()  # ‚Üê –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∏–≥—Ä

    # –ü–æ—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(init_db())
    asyncio.run(main())
